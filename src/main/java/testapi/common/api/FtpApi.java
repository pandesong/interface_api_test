package testapi.common.api;import java.io.*;import java.net.InetSocketAddress;import java.net.SocketAddress;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import sun.net.TelnetOutputStream;import sun.net.ftp.FtpClient;import sun.net.ftp.FtpDirEntry;import sun.net.ftp.FtpProtocolException;public class FtpApi {    private String localfilename;    private String remotefilename;    private static FtpClient ftpClient;    public Boolean connectServer(String ip, int port, String user, String password, String path) {        try {            ftpClient = FtpClient.create();            SocketAddress addr = new InetSocketAddress(ip, port);            ftpClient.connect(addr);            ftpClient.login(user, password.toCharArray());            // 设置成2进制传输            ftpClient.setBinaryType();            System.out.println("login success!");            if (path.length() != 0) {                // 把远程系统上的目录切换到参数path所指定的目录                ftpClient.changeDirectory(path);            }            ftpClient.setBinaryType();            return true;        } catch (IOException ex) {            ex.printStackTrace();            return false;        } catch (FtpProtocolException e) {            e.printStackTrace();        }        return false;    }    public String upload(String localFile, String remoteFile) {        OutputStream  os = null;        FileInputStream is = null;        try {            os = ftpClient.putFileStream(remoteFile);            //  获取本地文件的输入流            File file_in = new File(localFile);            is = new FileInputStream(file_in);            byte[] bytes = new byte[1];            int c;            while ((c = is.read(bytes)) != -1) {                if(c!=0){                    os.write(bytes, 0, c);                }            }            os.close();            is.close();            System.out.println("upload  success");            return "success";        } catch (IOException ex) {            System.out.println("not  upload");            ex.printStackTrace();            return null;        } catch (FtpProtocolException e) {            e.printStackTrace();        } finally {        }        return null;    }    public  void  deleteFile(String remoteFile){        try {            ftpClient.deleteFile(remoteFile);        } catch (FtpProtocolException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }    }    public  List  listFile(String dir){        try {            List  files=new ArrayList();            Iterator<FtpDirEntry> it = ftpClient.listFiles(dir);            while (it.hasNext()) {                FtpDirEntry ftpFile = it.next();                System.out.println("name:" + ftpFile.getName() + "  time:" + ftpFile.getLastModified());                files.add(ftpFile.getName());            }            return files;        } catch (FtpProtocolException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }        return null;    }    public void download(String remoteFile, String localFile) {        InputStream is = null;        FileOutputStream os = null;        try {            try {                is = ftpClient.getFileStream(remoteFile);            } catch (FtpProtocolException e) {                e.printStackTrace();            }            File file_in = new File(localFile);            os = new FileOutputStream(file_in);            byte[] bytes = new byte[1024];            int c;            while ((c = is.read(bytes)) != -1) {                os.write(bytes, 0, c);            }            System.out.println("download  success");        } catch (IOException ex) {            System.out.println("not  download");            ex.printStackTrace();            throw new RuntimeException(ex);        } finally {            try {                if (is != null) {                    is.close();                }            } catch (IOException e) {                e.printStackTrace();            } finally {                try {                    if (os != null) {                        os.close();                    }                } catch (IOException e) {                    e.printStackTrace();                }            }        }    }    public void closeConnect() {        try {            ftpClient.close();            System.out.println("disconnect success");        } catch (IOException ex) {            System.out.println("not disconnect");            ex.printStackTrace();            throw new RuntimeException(ex);        }    }}