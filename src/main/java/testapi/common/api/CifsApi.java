package testapi.common.api;import java.io.*;import java.net.MalformedURLException;import java.net.UnknownHostException;import java.util.Optional;import jcifs.smb.*;import org.apache.commons.io.IOUtils;import org.apache.commons.lang3.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;//import com.morpheus.transfer.common.HostVO;//import com.morpheus.transfer.utils.CommonUtil;import jcifs.UniAddress;import static org.springframework.util.StreamUtils.BUFFER_SIZE;public class CifsApi {    public static final String KEY_JCIFS_SMB_CLIENT_DFS_DISABLED = "jcifs.smb.client.dfs.disabled";    String  IP;    public NtlmPasswordAuthentication auth=null;    public boolean loginToRemote(String username,String password,String path,String IP) {        System.setProperty(KEY_JCIFS_SMB_CLIENT_DFS_DISABLED, String.valueOf(true));        jcifs.Config.setProperty(KEY_JCIFS_SMB_CLIENT_DFS_DISABLED, String.valueOf(true));        this.IP=IP;        try {            UniAddress dc = UniAddress.getByName(IP );            NtlmPasswordAuthentication auth = new NtlmPasswordAuthentication(null, username, password);            SmbSession.logon(dc, auth);            // SmbFile smbFile = new SmbFile("smb://;" + username + ":" + password + "@" + IP);            SmbFile smbFile = new SmbFile("cifs://"+ IP,auth);            //SmbFile smbFile = new SmbFile(String.format("cifs://%s/C$/", new Object[] { dc }), auth);            System.out.println(smbFile.isDirectory());            String[] files = smbFile.list();            files = Optional.ofNullable(files).orElse(new String[0]);            System.out.println("login  success!");            return files.length > 0;        } catch (Exception e) {            e.printStackTrace();            return true;        }    }    public void loginToRemote1(String username,String password,String path,String IP) throws IOException {        byte buffer[] = new byte [BUFFER_SIZE] ;        long startTime = System.currentTimeMillis();        UniAddress dc = null;        try {            dc = UniAddress.getByName( IP);        } catch (UnknownHostException e) {            e.printStackTrace();        }        NtlmPasswordAuthentication authentication = new NtlmPasswordAuthentication( IP , username , password );        SmbSession.logon(dc, authentication);        SmbFile file = new SmbFile( "smb://192.168.100.5/edse/users.txt" ,  authentication);        ByteArrayOutputStream out = new ByteArrayOutputStream();        BufferedInputStream in = new BufferedInputStream( new SmbFileInputStream(file));        //SmbFileInputStream in = new SmbFileInputStream(file) ;  //建立smb文件输入流     byte buffer[] = new byte [BUFFER_SIZE] ;        int count = - 1 ;        while ((count = in.read(buffer, 0 ,BUFFER_SIZE)) != - 1 ) {            out.write(buffer, 0 , count);        }        String content = new String(out.toByteArray(), "GBK" );        in.close();        System.out.println(System.currentTimeMillis() - startTime);        System.out.println(content);    }    public InputStream readFromRemote(String remoteFile,String username,String password) throws IOException {        String userName = username;        String userPwd = password;        NtlmPasswordAuthentication auth = new NtlmPasswordAuthentication(IP, userName, userPwd);        remoteFile = StringUtils.trimToEmpty(remoteFile);        remoteFile = remoteFile.replace("\\", "/").replace(":", "$");        SmbFile smbFile = new SmbFile(String.format("cifs://%s/%s", new Object[] { IP, remoteFile }), auth);        if (smbFile.exists()) {            return smbFile.getInputStream();        }        return new ByteArrayInputStream("ReadFromRemoteError".getBytes());    }    public void createRemoteDir(String remoteDir, boolean deleteExist, NtlmPasswordAuthentication auth)            throws MalformedURLException, SmbException {        String remoteRelativePath = remoteDir.replace("\\", "/").replace(":", "$") + "/";        String hostIP = IP;        SmbFile smbDir = new SmbFile(String.format("cifs://%s/%s", new Object[] { hostIP, remoteRelativePath }), auth);        if (deleteExist) {            if (smbDir.exists()) {                smbDir.delete();            }        }        if (!smbDir.exists()) {            smbDir.mkdirs();        }    }    public void transferToRemote(String localPath, String remoteDir) throws IOException {        File localFile = new File(localPath);        //  System.setProperty(KEY_JCIFS_SMB_CLIENT_DFS_DISABLED, String.valueOf(true));        //jcifs.Config.setProperty(KEY_JCIFS_SMB_CLIENT_DFS_DISABLED, String.valueOf(true));        if (localFile.isFile()) {            remoteDir = remoteDir.replace("\\", "/") + "/";            this.createRemoteDir(remoteDir, false, auth);            this.uploadFileWithSmb(localFile, remoteDir, auth);        } else if (localFile.isDirectory()) {            remoteDir = remoteDir.replace("\\", "/") + "/" + localFile.getName();            this.createRemoteDir(remoteDir, true, auth);            this.uploadDirWithSmb(localFile, remoteDir, auth);        }    }    public void uploadFileWithSmb(File localFile, String remoteDir, NtlmPasswordAuthentication auth) {        FileInputStream fileInputStream = null;        SmbFileOutputStream smbFileOutputStream = null;        try {            String remoteRelativePath = remoteDir.replace("\\", "/").replace(":", "$") + "/" + localFile.getName();            SmbFile smbFile = new SmbFile(String.format("cifs://%s/%s", new Object[] { IP, remoteRelativePath }), this.auth);            smbFileOutputStream = new SmbFileOutputStream(smbFile);            fileInputStream = new FileInputStream(localFile);            IOUtils.copyLarge(fileInputStream, smbFileOutputStream);        } catch (Throwable th) {        } finally {            IOUtils.closeQuietly(fileInputStream);            IOUtils.closeQuietly(smbFileOutputStream);        }    }    public void uploadDirWithSmb(File localDir, String remoteDir, NtlmPasswordAuthentication auth) throws IOException {        File[] files = localDir.listFiles();        files = Optional.ofNullable(files).orElse(new File[0]);        for (File file : files) {            if (file.isDirectory()) {                String relativeDestFile = remoteDir.replace("\\", "/").replace(":", "$") + "/" + file.getName();                SmbFile smbFile = new SmbFile(                        String.format("cifs://%s/%s", new Object[] { IP, relativeDestFile }),                        auth);                if (!smbFile.exists()) {                    smbFile.mkdirs();                } else if (smbFile.isDirectory()) {                    smbFile.delete();                }                this.uploadDirWithSmb(file, remoteDir + "/" + file.getName(), auth);            } else if (file.isFile()) {                FileInputStream fileInputStream = null;                SmbFileOutputStream smbFileOutputStream = null;                try {                    String relativeDestFile = remoteDir.replace("\\", "/").replace(":", "$") + "/" + file.getName();                    SmbFile smbFile = new SmbFile(                            String.format("cifs://%s/%s", new Object[] { IP, relativeDestFile }),                            auth);                    smbFileOutputStream = new SmbFileOutputStream(smbFile);                    fileInputStream = new FileInputStream(file);                    IOUtils.copyLarge(fileInputStream, smbFileOutputStream);                } finally {                    IOUtils.closeQuietly(fileInputStream);                    IOUtils.closeQuietly(smbFileOutputStream);                }            }        }    }}