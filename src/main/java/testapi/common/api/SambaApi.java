package testapi.common.api;import java.io.*;import java.net.MalformedURLException;import java.net.UnknownHostException;import jcifs.UniAddress;import jcifs.smb.*;import org.apache.commons.io.IOUtils;public class SambaApi {    public static void Put(String Dst_ip, String username, String password, String Dst_file, String local_file) {        try {            String ip = Dst_ip;            UniAddress ua = UniAddress.getByName(ip);            NtlmPasswordAuthentication auth = new NtlmPasswordAuthentication(ip, username, password);            SmbSession.logon(ua, auth);            SmbFile sf = new SmbFile("smb://"+ip+Dst_file, auth);            IOUtils.copyLarge(new FileInputStream(local_file), sf.getOutputStream());        } catch (UnknownHostException e) {            e.printStackTrace();        } catch (SmbException e) {            e.printStackTrace();        } catch (MalformedURLException e) {            e.printStackTrace();        } catch (FileNotFoundException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }    }    public static void uploadFileToSamba(String remoteDirURL,String localFilePath){        //入参检查        if (  (remoteDirURL==null) || ("".equals(remoteDirURL.trim()))){            System.out.println("Samba服务器远程目录路径不可以为空");            return;        }        //入参检查        if( (localFilePath==null) || ("".equals(localFilePath.trim()))){            System.out.println("本地文件路径不可以为空");            return;        }        InputStream in = null;        OutputStream out = null;        try{            //创建一个本地文件对象            File localFile = new File(localFilePath);            //获取本地文件的文件名，这个名字用于在远程的Samba服务器上指定目录创建同名文件            String localFileName = localFile.getName();            //创建远程服务器上Samba文件对象            SmbFile remoteSmbFile = new SmbFile(remoteDirURL+File.separator+localFileName);            //打开一个文件输入流执行本地文件，要从它读取内容            in = new  BufferedInputStream( new  FileInputStream(localFile));            //打开一个远程Samba文件输出流，作为复制到的目的地            out = new BufferedOutputStream( new SmbFileOutputStream(remoteSmbFile));            //缓冲内存            byte [] buffer =  new   byte [ 1024 ];            while  (in.read(buffer) != - 1 ) {                out.write(buffer);                buffer = new byte[ 1024 ];            }        } catch  (Exception e) {            e.printStackTrace();        } finally  {            try  {                out.close();                in.close();            } catch  (IOException e) {                e.printStackTrace();            }        }    }    public void Get(String Dst_ip,String username,String password,String Dst_file,String local_file) {        try {            String ip = Dst_ip;            UniAddress ua = UniAddress.getByName(ip);            NtlmPasswordAuthentication auth = new NtlmPasswordAuthentication(ip, username, password);            SmbSession.logon(ua, auth);            SmbFile sf = new SmbFile("smb://"+ip+Dst_file, auth);            IOUtils.copyLarge(sf.getInputStream(), new FileOutputStream(local_file));        } catch (UnknownHostException e) {            e.printStackTrace();        } catch (SmbException e) {            e.printStackTrace();        } catch (MalformedURLException e) {            e.printStackTrace();        } catch (FileNotFoundException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }    }}