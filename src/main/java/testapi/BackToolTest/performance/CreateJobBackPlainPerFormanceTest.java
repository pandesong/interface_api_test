package testapi.BackToolTest.performance;import cn.afterturn.easypoi.excel.ExcelImportUtil;import cn.afterturn.easypoi.excel.entity.ImportParams;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.tngtech.java.junit.dataprovider.DataProvider;import com.tngtech.java.junit.dataprovider.DataProviderRunner;import org.junit.*;import org.junit.runner.RunWith;import testapi.common.*;import testapi.common.SshModel.host;import testapi.common.api.ApiTest;import testapi.framework.SSHExecutor;import java.io.File;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;@RunWith(DataProviderRunner.class)public class CreateJobBackPlainPerFormanceTest {	static ApiTest api=new ApiTest();	private static SSHExecutor sshcmd;	String plainId="";	private static SSHExecutor dstsshcmd;	String srcpath=api.src_path+"/filter";	@BeforeClass	public  static void beforeclass(){		sshcmd=api.ssh_login(api.ssh_src_username,api.ssh_src_password, api.ssh_login_src_ip, api.ssh_src_port);		sshcmd.setHost_type(api.ssh_src_type);		dstsshcmd=api.ssh_login(api.ssh_dest_username,api.ssh_dest_password, api.ssh_dst_ip, api.ssh_dest_port);		dstsshcmd.setHost_type(api.ssh_dst_type);	}	@AfterClass	public static  void afterclass(){	}	@Test	public  void TestCase_delmorejob(){		for(int i=0;i<2;i++) {			Result res=api.getjopplainList("","","");			System.out.println(JSONObject.parseObject(res.getBody()));			String id= JSONObject.parseObject(res.getBody()).getJSONArray("content").getJSONObject(0).getString("id");			api.DeleteJobPlain(id);		}	}	@DataProvider	public static List<host> linuxtolinuxhost() {		try{			ImportParams params = new ImportParams();			params.setTitleRows(1);			params.setHeadRows(1);			List<host> list = ExcelImportUtil.importExcel(new File(api.hosts_xls), host.class, params);			return list;		}catch (Exception e){			return null;		}	}	@Test//同一个时刻多个作业	public  void TestCase_morejob1(){		int count=1;		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");		ArrayList JobList=new ArrayList();		ArrayList result=new ArrayList();		for(int i=0;i<count;i++) {			JobList.add(create_job_no_pack_one_thread(sdf.format(System.currentTimeMillis()+30*1000)));		}		for(int i=0;i<count;i++) {			result.add(whait_for_job_end(JobList.get(i).toString()));		}		for(int i=0;i<count;i++) {		}		Assert.assertTrue(!result.contains(false));	}	public String whait_for_job_end(String JobName){		try {			int count = 1;			while (count < 1800) {				JobStatusRespModel JobStatusResp = api.GetJobStatus(JobName);				if(JobStatusResp==null) {					Thread.sleep(1000);				}				if (JobStatusResp.getContent().size() == 0) {					Thread.sleep(1000);				}				else {					String status = JobStatusResp.getContent().get(0).getJobStatus();					if (status.equals("R") || status.equals("C")) {						Thread.sleep(1000);					} else if (status.equals("T")) {						break;					} else {						System.out.println("作业运行失败："+JobName);						return null;					}				}				count++;			}			if (count >= 7200) {				System.out.println("作业运行超过了3个小时  "+JobName);				return null;			}			JobLogRespModel joblog = api.GetJobLog(JobName);			ArrayList list = new ArrayList();			String desPathName = null;			for (int a = 0; a < joblog.getContent().size(); a++) {				if (!joblog.getContent().get(a).getStatus().equals("0")) {					System.out.println("BACK JOB ERROR " + JobName);					return null;				}				desPathName = joblog.getContent().get(a).getDesPathName();				list.add(joblog.getContent().get(a).getFileName());			}			if (desPathName == null)			{				System.out.println("没有文件进行备份 "+JobName);				return null;			}			return desPathName;		}		catch (Exception e)		{			e.printStackTrace();			return null;		}	}	@Test	public  void  TestCase_CreateJobTenTogether_RunOnce(){		ArrayList JobList=new ArrayList();		for(int i=0;i<15;i++){			JobList.add(create_job_no_pack_one_thread(""));		}	}	public  String  create_job_no_pack_one_thread(String BeginTime){		try {			ArrayList JobList=new ArrayList();			JobPlainStatusModel Model=new JobPlainStatusModel();			String JobName="a"+String.valueOf(System.currentTimeMillis());			Model.setTaskName(JobName);			Model.setTaskType(2);			//   api.ssh_src_ip="127.0.0.1";			//  api.ssh_dst_ip="127.0.0.1";			Model.setSourcePath(api.src_path);			Model.setsourceIp(api.ssh_src_ip);			Model.setTargetPath(api.dst_path);			Model.setTargetIp(api.ssh_dst_ip);			Model.setScheduleType(0);			Date d = new Date();			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");			Model.setTaskBeginTime(BeginTime);			Model.setScheduleTypeReadOnly(false);			Model.setFilterVisible(false);			Model.setIsPackaging("0");			//  Model.setPackingLevel("0");			//  Model.setFileSizeUnit("MB");			//  Model.setPackingSize(1);			Model.setThreadNum(1);			Model.setSmallBatchCommitNum(1);			Model.setFileCheckType("2");			Model.setBackupType(1);			Result resp=api.CreateJobPlain(JSON.toJSONString(Model));			if(resp.getCode()!=400){				return JobName;			}			else {				System.out.println("===============================创建作业计划任务失败==========================");				System.out.println(resp.getBody());				Assert.assertTrue(false);			}		}catch (Exception e){			e.printStackTrace();		}		return "";	}	public  String  create_job_no_pack_one_thread_hosts(String BeginTime,String  src_path,String src_ip){		try {			host ht=new host();			ht.setStruct(src_ip);			src_ip=src_ip.split(":")[0];			ArrayList JobList=new ArrayList();			JobPlainStatusModel Model=new JobPlainStatusModel();			String JobName="a"+String.valueOf(System.currentTimeMillis());			Model.setTaskName(JobName);			Model.setTaskType(2);			Model.setSourcePath(src_path);			Model.setsourceIp(src_ip);			Model.setTargetPath(api.dst_path);			Model.setTargetIp(api.ssh_dst_ip);			Model.setScheduleType(0);			Model.setTaskBeginTime(BeginTime);			Model.setScheduleTypeReadOnly(false);			Model.setFilterVisible(false);			Model.setIsPackaging("0");			Model.setThreadNum(10);			Model.setSmallBatchCommitNum(1);			Model.setFileCheckType("2");			Model.setBackupType(1);			Result resp=api.CreateJobPlain(JSON.toJSONString(Model));			if(resp.getCode()!=400){				return JobName;			}			else {				System.out.println("===============================创建作业计划任务失败==========================");				System.out.println(resp.getBody());				Assert.assertTrue(false);			}		}catch (Exception e){			e.printStackTrace();		}		return null;	}	private   Result dealResult(host ht){		Result re=new Result();		System.out.printf("比较作业 %s 的执行结果:%s\r\n",ht.getJobname(),ht.getSrcip());		SSHExecutor sshsrc=api.ssh_login(ht.getSrc_username(),ht.getSrc_password(),ht.getSrcip(),ht.getSrc_port());		sshsrc.setHost_type(ht.getSrc_host_type());		SSHExecutor    dstsshcmd=api.ssh_login(ht.getDst_username(),ht.getDst_password(),ht.getDst_ip(),ht.getSrc_port());		dstsshcmd.setHost_type(api.ssh_dst_type);		Result res=api.compile_the_result( sshsrc, dstsshcmd, ht.getDstResultPaht(), ht.getSrcpath(), ht.getSrc_path());		if(res.getCode()==400)		{			System.out.printf("作业：%s    结果比较失败,失败原因:%s\r\n",ht.getJobname(),res.getBody());			re.setBody(String.format("作业：%s    结果比较失败,失败原因:%s\r\n",ht.getJobname(),res.getBody()));			re.setCode(400);		}		Result resp = api.GetJobPlainByName(ht.getJobname());		JSONArray content = JSONObject.parseObject(resp.getBody()).getJSONArray("content");		String id = content.getJSONObject(0).getString("id");		api.DeleteJobPlain(id);		re.setCode(200);		return  re;	}	@Test  //同一个时刻多个作业	public  void TestCase_morejob_linux_to_linux(){		ArrayList<host> result=new ArrayList();		ArrayList<host> compile=new ArrayList();		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");		String starttime=sdf.format(System.currentTimeMillis() + 40 * 1000);		List<host>   hosts=linuxtolinuxhost();		if(hosts==null  ){			System.out.println("主机配置有误！");			return;		}		for(host ht:hosts) {			if(ht.getEnable()==1){				String hh=create_job_no_pack_one_thread_hosts(starttime,ht.getSrc_path(),ht.getSrcip());				if(hh!=null) {					ht.setJobname(hh);					result.add(ht);				}			}		}		for(host host:result) {			System.out.printf("判断作业%s的执行情况 \r\n",host.getJobname());			String re=whait_for_job_end(host.getJobname());			if(re!=null){				host.setDstResultPaht(re);				compile.add(host);			}else {				System.out.println("作业执行失败 "+host.getJobname());			}		}		for(host hh:compile) {			dealResult(hh);		}	}	@Test	public   void  TestCase_get_backjob_number(){		String[]  jobs={"a1623117062601","a1623117062589","a1623117062577","a1623117062566","a1623117062553","a1623117062541","a1623117062529","a1623117062515","a1623117062500","a1623117062481","a1623117062466","a1623117062450","a1623117062429","a1623117062415","a1623117062396","a1623117062377","a1623117062353","a1623117062330","a1623117062314","a1623117062281"};		//  Result result=api.getjopplainList("","","a1623117");		//  System.out.println(result.getBody());		//JobStatusRespModel   Jp=JSONObject.parseObject(result.getBody(),JobStatusRespModel.class);		for(String Js:jobs) {			JobLogRespModel  Jl=api.GetJobLog(Js);			System.out.printf("JobName:%s,backnumber :%d\n",Js,Jl.getTotalElements());		}	}}