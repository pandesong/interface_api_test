//// Source code recreated from a .class file by IntelliJ IDEA// (powered by FernFlower decompiler)//package testapi.DistributedStorage.FilesStorage;import cn.afterturn.easypoi.excel.ExcelImportUtil;import cn.afterturn.easypoi.excel.entity.ImportParams;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.tngtech.java.junit.dataprovider.DataProvider;import java.io.File;import java.util.ArrayList;import java.util.List;import org.junit.After;import org.junit.AfterClass;import org.junit.Assert;import org.junit.Before;import org.junit.BeforeClass;import org.junit.Ignore;import org.junit.Test;import testapi.common.DistributedStorage.*;import testapi.common.Result;import testapi.common.SnapShotModel.SsrequestModel;import testapi.common.Tool.CronUtil;import testapi.common.Tool.timeObject;import testapi.common.api.PgApi;import testapi.common.apiManager.DapiTest;import testapi.framework.SSHExecutor;public class Snapshot {    static DapiTest api = new DapiTest(false);    static SSHExecutor sshcmd = null;    static String groupname = "Snapshottest";    static String username = "Snapshotuser";    static String filepoolname = "hufeiPool";    static String export_path;    static PgApi pg;    static String SnapshotId = null;    static String groupid = null;    static String userid = null;    static int poolid = 0;    static String password="Zjcc_123";    static  String  checksum="";    public static String CreateStorePool_danfuben() throws InterruptedException {        filepoolname = "pool" + String.valueOf(System.currentTimeMillis() / 1000);        CreateStorePoolRequestModel rm=new CreateStorePoolRequestModel();        ArrayList unit=new ArrayList();        JSONArray um = api.GetStoreagePoolUnusedUint("", "", "");        for(Object ss:um){            StoreagePoolUnusedUintResponsedetailModel dd= JSONObject.parseObject(ss.toString(),StoreagePoolUnusedUintResponsedetailModel.class);            unit.add(dd.getId());        }        rm.setName(filepoolname);        rm.setHddUnits(unit);        rm.setPoolType(0);        rm.setHddStrategy(1);        rm.setSsdStrategy("");        rm.setSsdProtectNum(1);        rm.setHddProtectNum(1);        System.out.println(JSONObject.toJSON(rm).toString());        Result resp = api.CreateStore(JSONObject.toJSON(rm).toString());        Assert.assertTrue(resp.getCode()==200);        Result res=api.getpooldetail(filepoolname);        StoreageModel sm=  JSONObject.parseObject(res.getBody(),StoreageModel.class);        api.enableStoreAgePool("{\"id\":%id%}".replace("%id%",sm.getContent().get(0).getId()));        while (api.GetStoreAgePool(filepoolname).getBody().indexOf("\"status\":1")<0){            Thread.sleep(4000);        }        poolid=Integer.valueOf(sm.getContent().get(0).getId());        return  sm.getContent().get(0).getId();    }    public static String TestCase_CreateUserGroup(String groupname) throws InterruptedException {        Assert.assertTrue(groupname!=null);        String JobName="pgroup"+String.valueOf(System.currentTimeMillis());        CreateGroupRequestModel Gre=new CreateGroupRequestModel();        Gre.setName(groupname);        Gre.setIsEnable(true);        Gre.setPsw(password);        Gre.setCheckPass(password);        Gre.setBillingMethod("1");        Gre.setPassword(api.encrypt(password.getBytes()));        ArrayList<StoragePoolVos>  pools=new ArrayList<StoragePoolVos>();        StoragePoolVos pool=new StoragePoolVos();        pool.setPoolId(poolid);        pool.setPoolName(filepoolname);        pool.setNewQuota(21474836480L);//209g        pools.add(pool);        ArrayList<TableData>  tds=new ArrayList<TableData>();        TableData td=new TableData();        td.setId(poolid);        td.setLabel(filepoolname);        td.setFreeDiskSpace(4507997569024L);//磁盘总容量        td.setQuota("20");//20G        td.setType("2");        tds.add(td);        Gre.setStoragePoolVos(pools);        Gre.setTableData(tds);        System.out.println(JSON.toJSONString(Gre));        Result res=api.CreateGroupe(JSON.toJSONString(Gre));        Assert.assertTrue(res.getCode()==200);        Thread.sleep(5000);        System.out.printf("create groupname %s success\n",groupname);        System.out.printf("select  id from ame_fsusergroup where  name='%s'",groupname);        return   pg.execsql(String.format("select  id from ame_fsusergroup where  name='%s'",groupname));    }    @BeforeClass    public static void beforeclass() throws InterruptedException {        sshcmd = api.ssh_login(api.ssh_dest_username, api.ssh_dest_password, api.ssh_dst_ip, api.ssh_dest_port);        pg = new PgApi(api.database_ip, api.database_port, api.database_username, api.database_password, api.database_dbname);        CreateStorePool_danfuben();        Thread.sleep(10000);       // poolid=Integer.valueOf(pg.execsql(String.format("SELECT  id  from ame_storagepool where name='%s';",filepoolname)));        username= "puser" + String.valueOf(System.currentTimeMillis() / 1000);        groupname = "guser" + String.valueOf(System.currentTimeMillis() / 1000);        export_path = String.format("/exports/%s/%s/%s/", filepoolname, groupname, username);        groupid = TestCase_CreateUserGroup(groupname);        Assert.assertTrue(groupid!=null);        CreateUserRequestModel user = new CreateUserRequestModel();        user.setName(username);        user.setGroupId(Integer.valueOf(groupid));        user.setPsw(password);        user.setCheckPass(password);        user.setQuotaType("1");        user.setIsEnable(true);        ArrayList<TableData> tds = new ArrayList<TableData>();        TableData td = new TableData();        td.setId(poolid);        td.setLabel(filepoolname);        td.setFreeDiskSpace(2073741824);        td.setQuota("10");        td.setType("2");        td.setQuotaType("1");        tds.add(td);        ArrayList<storageUserPoolVos> pools = new ArrayList<storageUserPoolVos>();        storageUserPoolVos pool = new storageUserPoolVos();        pool.setPoolId(poolid);        pool.setPoolName(filepoolname);        pool.setNewQuota("2073741824");        pool.setQuotaType("1");        pools.add(pool);        user.setStorageUserPoolVos(pools);        user.setTableData(tds);        user.setPassword(api.encrypt(password.getBytes()));        Result resp = api.CreateUser(JSON.toJSONString(user));        System.out.println(resp.getBody());        Assert.assertTrue(resp.getCode() == 200);        userid = pg.execsql(String.format("select  id from ame_fsuser where  group_id='%s'",groupid));        Result res = api.EnableFtpShare(String.valueOf(userid),"\"3\",\"2\",\"1\"");        Assert.assertTrue(res.getCode()==200);        try {            Thread.sleep(20000);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    @AfterClass    public static void afterclass() {        String cmd = String.format("rm  -rf  %s/.snap&&rm  -rf  %s/*", export_path,export_path);        Result res = sshcmd.exec(cmd);        res = api.DeleteUser(String.valueOf(userid));        System.out.println(String.format("删除用户：%s",res.getBody()));        assert res.getCode()==200;        res = api.DeleteGroup(String.valueOf(groupid));        System.out.println(String.format("删除用户组：%s",res.getBody()));        assert res.getCode()==200;        res =  api.disableStoreAgePool("{\"id\":%id%}".replace("%id%",String.valueOf(poolid)));        assert res.getCode()==200;        res =  api.deleteStoreAgePool(String.valueOf(poolid));        assert res.getCode()==200;    }    @Before    public void beforetestcase() {        try {            Thread.sleep(2000L);        } catch (InterruptedException var3) {            var3.printStackTrace();        }        String cmd = String.format("echo  'testsssssss'   >> %s/pdstest.txt&&ls  %s/pdstest.txt|wc -l  2>&1", this.export_path, this.export_path);        Result rest = sshcmd.exec(cmd);        System.out.println("创建文件，准备进行快照备份：" + rest.getBody());        Assert.assertTrue(rest.getBody().equals("1"));        cmd = String.format("md5sum %s/pdstest.txt", this.export_path);        rest = sshcmd.exec(cmd);        checksum=rest.getBody();    }    @After    public void aftertestcase() {        if (SnapshotId != null) {            Result rest = sshcmd.exec(String.format("rm -rf  %s/pdstest.txt&&ls  %s/pdstest.txt|wc -l",export_path,export_path));            System.out.println("回滚完后删除文件：" + rest.getBody());            Result res = api.DeleteSnapshot(SnapshotId);            Assert.assertTrue(res.getCode() == 200);            res = sshcmd.exec(String.format("/usr/local/amefs/sbin/ame lvg info    %s  |grep  Status|awk  ' {  print $2 } '",filepoolname));            Assert.assertTrue(res.getBody().equals("Started"));        }        SnapshotId = null;    }    @DataProvider    public static List<hostlist> hostlistdate() {        try {            ImportParams params = new ImportParams();            params.setTitleRows(1);            params.setHeadRows(1);            List<hostlist> list = ExcelImportUtil.importExcel(new File(api.host_list), hostlist.class, params);            return list;        } catch (Exception var2) {            return null;        }    }    @Ignore    public void TestCase_CreateSnapshotAndRoolBack_cycleCron() {        String JobName = "cycleCron" + String.valueOf(System.currentTimeMillis());        SsrequestModel srm = new SsrequestModel();        srm.setName(JobName);        srm.setStoragepoolId(18);        srm.setFsuserId(14);        srm.setFsusergroupId(8);        srm.setDicName("./hufuser");        srm.setDispatchCron("0 0/1 * * * ?");        srm.setDay(1);        srm.setWeek("1");        srm.setTime("1");        srm.setDispatchTime("1");        srm.setSnaDesc("");        srm.setDispatchStyle("2");        Result res = api.CreateSnapshot(JSON.toJSONString(srm));        Assert.assertTrue(res.getCode() == 200);        System.out.println(String.format("创建快照成功：%s", JSON.toJSONString(srm)));        res = api.GetSnapshotList(JobName);        JSONArray test = JSON.parseObject(res.getBody()).getJSONArray("content");        for(int i = 0; i < test.size(); ++i) {            if (test.getJSONObject(i).getString("name").contains(JobName)) {                String id = test.getJSONObject(i).getString("id");                SnapshotId = id;                for(int w = 0; w < 180; ++w) {                    res = api.GetSnapshotVersion(id);                    if (!res.getBody().equals("[]")) {                        Result rest = sshcmd.exec("rm -rf  /exports/hufeiPool/hufgroup/hufuser/pdstest.txt&&ls  /exports/hufeiPool/hufgroup/hufuser/pdstest.txt|wc -l");                        System.out.println("删除文件，使用备份的文件进行回滚: " + rest.getBody());                        Assert.assertTrue(rest.getBody().equals("0"));                        String versionid = JSONObject.parseArray(res.getBody()).getJSONObject(0).getString("id");                        res = api.rollbackSnapshot(id, versionid);                        System.out.println(res.getBody());                        Assert.assertTrue(res.getCode() == 200);                        rest = sshcmd.exec("ls  /exports/hufeiPool/hufgroup/hufuser/pdstest.txt|wc -l");                        System.out.println("查看回滚后，文件是否生成：" + rest.getBody());                        Assert.assertTrue(rest.getBody().equals("1"));                        return;                    }                    try {                        Thread.sleep(5000L);                    } catch (InterruptedException var10) {                        var10.printStackTrace();                    }                }                return;            }        }    }    public void TestCase_CreateSnapshotAndRoolBack_more() {        for(int i = 0; i < 100; ++i) {            String JobName = "everyDayCron" + String.valueOf(System.currentTimeMillis());            SsrequestModel srm = new SsrequestModel();            srm.setName(JobName);            srm.setStoragepoolId(poolid);            srm.setFsuserId(Integer.valueOf(userid));            srm.setFsusergroupId(Integer.valueOf(groupid));            srm.setDicName("./hufuser");            srm.setVersionDeletestrategy(1);            timeObject tt = CronUtil.erverCronDayTime(70);            srm.setDispatchCron(tt.getCron() + " *");            srm.setDay(1);            srm.setWeek("1");            srm.setTime(tt.getTime());            srm.setDispatchTime(tt.getDispatchTime());            srm.setSnaDesc("");            srm.setDispatchStyle("3");            Result res = api.CreateSnapshot(JSON.toJSONString(srm));            System.out.println(String.format("创建快照：%s", JSON.toJSONString(srm)));            Assert.assertTrue(res.getCode() == 200);            try {                Thread.sleep(3000L);            } catch (InterruptedException var7) {                var7.printStackTrace();            }        }    }    public  void  TestCase_wait(JSONArray test,String JobName) throws InterruptedException {        if (test.getJSONObject(1).getString("name").contains(JobName)) {            String id = test.getJSONObject(1).getString("id");            SnapshotId = id;            for(int w = 0; w < 180; ++w) {                Result     res = api.GetSnapshotVersion(id);                Result    res1=api.GetSnapshotVersionStatus(JobName);                System.out.println(res.getBody());                JSONObject  c=JSONObject.parseObject(res1.getBody());                JSONObject  c1=JSONObject.parseObject(res.getBody());                if (!res.getBody().equals("[]") &&!res.getBody().contains("\"totalCount\":0")) {                    Boolean  status=c.getJSONArray("list").getJSONObject(0).getBoolean("isSuccess");                    if(status!=null&& status==true){                        Result rest = sshcmd.exec(String.format("rm -rf  %s/pdstest.txt&&ls  %s/pdstest.txt|wc -l",export_path,export_path));                        System.out.println("删除文件，使用备份的文件进行回滚: " + rest.getBody());                        Assert.assertTrue(rest.getBody().equals("0"));                        String versionid = c1.getJSONArray("list").getJSONObject(0).getString("id");                        res = api.rollbackSnapshot(id, versionid);                        System.out.println(res.getBody());                        Assert.assertTrue(res.getCode() == 200);                        Thread.sleep(3000L);                        rest = sshcmd.exec(String.format("ls  %s/pdstest.txt|wc -l",export_path));                        System.out.println("查看回滚后，文件是否生成：" + rest.getBody());                        Assert.assertTrue(rest.getBody().equals("1"));                        res= api.delSnapshotVersionStatus(versionid,JobName);                        assert  res.getCode()==200;                        return;                    }                    else if(status==null) {}                    else {                        Assert.assertTrue(false);                    }                }                try {                    Thread.sleep(5000L);                } catch (InterruptedException var11) {                    var11.printStackTrace();                }            }            return;        }    }    @Test    public void TestCase_CreateSnapshotAndRoolBack_everyDayCron() throws InterruptedException {        CronUtil  cc=new CronUtil();        String JobName = "everyDayCron" + String.valueOf(System.currentTimeMillis());        SsrequestModel srm = new SsrequestModel();        srm.setName(JobName);        srm.setStoragepoolId(poolid);        srm.setFsuserId(Integer.valueOf(userid));        srm.setFsusergroupId(Integer.valueOf(groupid));        srm.setDicName("./" + username);        srm.setVersionDeletestrategy(1);        timeObject tt = cc.erverCronDayTime(70);        srm.setDispatchCron(tt.getCron() + " *");        srm.setDay(1);        srm.setWeek("1");        srm.setTime(tt.getTime());        srm.setDispatchTime(tt.getDispatchTime());        srm.setSnaDesc("");        srm.setDispatchStyle("3");        Result res = api.CreateSnapshot(JSON.toJSONString(srm));        System.out.println(String.format("创建快照：%s", JSON.toJSONString(srm)));        Assert.assertTrue(res.getCode() == 200);        res = api.GetSnapshotList(JobName);        System.out.println(String.format("获取快照信息：%s", res.getBody()));        JSONArray test = JSON.parseObject(res.getBody()).getJSONArray("content");        for(int i = 0; i < test.size(); ++i) {            if (test.getJSONObject(i).getString("name").contains(JobName)) {                String id = test.getJSONObject(i).getString("id");                SnapshotId = id;                for(int w = 0; w < 180; ++w) {                    res = api.GetSnapshotVersion(id);                    Result    res1=api.GetSnapshotVersionStatus(JobName);                    System.out.println(res.getBody());                    JSONObject  c=JSONObject.parseObject(res1.getBody());                    JSONObject  c1=JSONObject.parseObject(res.getBody());                    if (!res.getBody().equals("[]") &&!res.getBody().contains("\"totalCount\":0")) {                        Boolean  status=c.getJSONArray("content").getJSONObject(0).getBoolean("isSuccess");                        if(status!=null&& status==true){                        Result rest = sshcmd.exec(String.format("rm -rf  %s/pdstest.txt&&ls  %s/pdstest.txt|wc -l",export_path,export_path));                        System.out.println("删除文件，使用备份的文件进行回滚: " + rest.getBody());                        Assert.assertTrue(rest.getBody().equals("0"));                        String versionid = c1.getJSONArray("list").getJSONObject(0).getString("id");                        res = api.rollbackSnapshot(id, versionid);                        System.out.println(res.getBody());                        Assert.assertTrue(res.getCode() == 200);                        Thread.sleep(10000L);                        rest = sshcmd.exec(String.format("ls  %s/pdstest.txt|wc -l",export_path));                        System.out.println("查看回滚后，文件是否生成：" + rest.getBody());                        Assert.assertTrue(rest.getBody().equals("1"));                        res= api.delSnapshotVersionStatus(versionid,JobName);                        assert  res.getCode()==200;                          //  Thread.sleep(10000L);                        return;                        }                        else if(status==null) {                        }                        else {                            Assert.assertTrue(false);                        }                    }                    try {                        Thread.sleep(5000L);                    } catch (InterruptedException var11) {                        var11.printStackTrace();                    }                }                Assert.assertTrue(false);            }        }    }    @Test    public void TestCase_CreateSnapshotAndRoolBack_everyWeekCron() throws InterruptedException {        CronUtil  cc=new CronUtil();        String JobName = "everyWeekCron" + String.valueOf(System.currentTimeMillis());        SsrequestModel srm = new SsrequestModel();        srm.setName(JobName);        srm.setStoragepoolId(poolid);        srm.setFsuserId(Integer.valueOf(userid));        srm.setFsusergroupId(Integer.valueOf(groupid));        srm.setDicName("./" + username);        timeObject tt = cc.erverCronWeekTime();        srm.setDispatchCron(tt.getCron());        srm.setDay(1);        srm.setWeek("1");        srm.setTime(tt.getTime());        srm.setVersionDeletestrategy(1);        srm.setDispatchTime(tt.getDispatchTime());        srm.setSnaDesc("");        srm.setDispatchStyle("4");        System.out.println(String.format("创建快照:%s", JSON.toJSONString(srm)));        Result res = api.CreateSnapshot(JSON.toJSONString(srm));        Assert.assertTrue(res.getCode() == 200);        System.out.println(String.format("创建快照成功：%s", res.getBody()));        res = api.GetSnapshotList(JobName);        JSONArray test = JSON.parseObject(res.getBody()).getJSONArray("content");        for(int i = 0; i < test.size(); ++i) {            if (test.getJSONObject(i).getString("name").contains(JobName)) {                String id = test.getJSONObject(i).getString("id");                SnapshotId = id;                for(int w = 0; w < 180; ++w) {                    res = api.GetSnapshotVersion(id);                    Result    res1=api.GetSnapshotVersionStatus(JobName);                    System.out.println(res.getBody());                    JSONObject  c=JSONObject.parseObject(res1.getBody());                    JSONObject  c1=JSONObject.parseObject(res.getBody());                    if (!res.getBody().equals("[]") &&!res.getBody().contains("\"totalCount\":0")) {                        Boolean  status=c.getJSONArray("content").getJSONObject(0).getBoolean("isSuccess");                        if(status!=null&& status==true){                        Result rest = sshcmd.exec(String.format("rm -rf  %s/pdstest.txt&&ls  %s/pdstest.txt|wc -l",export_path,export_path));                        System.out.println("删除文件，使用备份的文件进行回滚: " + rest.getBody());                        Assert.assertTrue(rest.getBody().equals("0"));                            String versionid = c1.getJSONArray("list").getJSONObject(0).getString("id");                        res = api.rollbackSnapshot(id, versionid);                        System.out.println(res.getBody());                        Assert.assertTrue(res.getCode() == 200);                        Thread.sleep(3000L);                            rest = sshcmd.exec(String.format("ls  %s/pdstest.txt|wc -l",export_path));                        System.out.println("查看回滚后，文件是否生成：" + rest.getBody());                        Assert.assertTrue(rest.getBody().equals("1"));                            res= api.delSnapshotVersionStatus(versionid,JobName);                            assert  res.getCode()==200;                          //  Thread.sleep(5000L);                        return;}                        else if(status==null) {}                        else {                            Assert.assertTrue(false);                        }                    }                    try {                        Thread.sleep(5000L);                    } catch (InterruptedException var11) {                        var11.printStackTrace();                    }                }                Assert.assertTrue(false);                return;            }        }    }    @Test    public void TestCase_CreateSnapshotAndRoolBack_everyMonthCron() throws InterruptedException {        CronUtil  cc=new CronUtil();        String JobName = "everyMonthCron" + String.valueOf(System.currentTimeMillis());        SsrequestModel srm = new SsrequestModel();        srm.setName(JobName);        srm.setStoragepoolId(poolid);        srm.setFsuserId(Integer.valueOf(userid));        srm.setFsusergroupId(Integer.valueOf(groupid));        srm.setDicName("./" + username);        timeObject tt = cc.erverCronMonthTime();        srm.setDispatchCron(tt.getCron());        srm.setDay(1);        srm.setWeek("1");        srm.setTime(tt.getTime());        srm.setDispatchTime(tt.getDispatchTime());        srm.setSnaDesc("");        srm.setVersionDeletestrategy(1);        srm.setDispatchStyle("5");        System.out.println(String.format("创建快照:%s", JSON.toJSONString(srm)));        Result res = api.CreateSnapshot(JSON.toJSONString(srm));        Assert.assertTrue(res.getCode() == 200);        System.out.println(String.format("创建快照成功：%s", JSON.toJSONString(srm)));        res = api.GetSnapshotList(JobName);        JSONArray test = JSON.parseObject(res.getBody()).getJSONArray("content");        for(int i = 0; i < test.size(); ++i) {            if (test.getJSONObject(i).getString("name").contains(JobName)) {                String id = test.getJSONObject(i).getString("id");                SnapshotId = id;                for(int w = 0; w < 180; ++w) {                    res = api.GetSnapshotVersion(id);                    Result    res1=api.GetSnapshotVersionStatus(JobName);                    System.out.println(res.getBody());                    JSONObject  c=JSONObject.parseObject(res1.getBody());                    JSONObject  c1=JSONObject.parseObject(res.getBody());                    if (!res.getBody().equals("[]") &&!res.getBody().contains("\"totalCount\":0")) {                        Boolean  status=c.getJSONArray("content").getJSONObject(0).getBoolean("isSuccess");                        if(status!=null&& status==true){                        Result rest = sshcmd.exec(String.format("rm -rf  %s/pdstest.txt&&ls  %s/pdstest.txt|wc -l",export_path,export_path));                        System.out.println("删除文件，使用备份的文件进行回滚: " + rest.getBody());                        Assert.assertTrue(rest.getBody().equals("0"));                        String versionid = c1.getJSONArray("list").getJSONObject(0).getString("id");                        res = api.rollbackSnapshot(id, versionid);                        System.out.println(res.getBody());                        Assert.assertTrue(res.getCode() == 200);                        Thread.sleep(3000L);                        rest = sshcmd.exec(String.format("ls  %s/pdstest.txt|wc -l",export_path));                        System.out.println("查看回滚后，文件是否生成：" + rest.getBody());                        Assert.assertTrue(rest.getBody().equals("1"));                            res= api.delSnapshotVersionStatus(versionid,JobName);                            assert  res.getCode()==200;                          //  Thread.sleep(5000L);                        return;                        }                        else if(status==null) {                        }                        else {                            Assert.assertTrue(false);                        }                    }                    try {                        Thread.sleep(5000L);                    } catch (InterruptedException var11) {                        var11.printStackTrace();                    }                }                Assert.assertTrue(false);                return;            }        }    }    @Test    public void TestCase_CreateSnapshotAndRoolBack_OnceCron() throws InterruptedException {        String JobName = "OnceCron" + String.valueOf(System.currentTimeMillis());        SsrequestModel srm = new SsrequestModel();        srm.setName(JobName);        srm.setStoragepoolId(poolid);        srm.setFsuserId(Integer.valueOf(userid));        srm.setFsusergroupId(Integer.valueOf(groupid));        srm.setDicName("./" + username);        timeObject tt = CronUtil.onceCronTime(70*1000);        srm.setDispatchCron(tt.getCron());        srm.setDay(1);        srm.setWeek("1");        srm.setTime(tt.getTime());        srm.setDispatchTime(tt.getDispatchTime());        srm.setSnaDesc("");        srm.setDispatchStyle("1");        srm.setVersionDeletestrategy(1);        System.out.println(String.format("创建快照:%s", JSON.toJSONString(srm)));        Result res = api.CreateSnapshot(JSON.toJSONString(srm));        Assert.assertTrue(res.getCode() == 200);        System.out.println(String.format("创建快照成功：%s", res.getBody()));        res = api.GetSnapshotList(JobName);        JSONArray test = JSON.parseObject(res.getBody()).getJSONArray("content");        for(int i = 0; i < test.size(); ++i) {            if (test.getJSONObject(i).getString("name").contains(JobName)) {                String id = test.getJSONObject(i).getString("id");                SnapshotId = id;                for(int w = 0; w < 180; ++w) {                    res = api.GetSnapshotVersion(id);                    Result    res1=api.GetSnapshotVersionStatus(JobName);                    System.out.println(res.getBody());                    JSONObject  c=JSONObject.parseObject(res1.getBody());                    JSONObject  c1=JSONObject.parseObject(res.getBody());                    if (!res.getBody().equals("[]") &&!res.getBody().contains("\"totalCount\":0")) {                        Boolean  status=c.getJSONArray("content").getJSONObject(0).getBoolean("isSuccess");                        if(status!=null&& status==true){                        Result rest = sshcmd.exec(String.format("rm -rf  %s/pdstest.txt&&ls  %s/pdstest.txt|wc -l",export_path,export_path));                        System.out.println("删除文件，使用备份的文件进行回滚: " + rest.getBody());                        Assert.assertTrue(rest.getBody().equals("0"));                            String versionid = c1.getJSONArray("list").getJSONObject(0).getString("id");                        res = api.rollbackSnapshot(id, versionid);                        System.out.println(res.getBody());                        Assert.assertTrue(res.getCode() == 200);                        Thread.sleep(3000L);                        rest = sshcmd.exec(String.format("ls  %s/pdstest.txt|wc -l",export_path));                        System.out.println("查看回滚后，文件是否生成：" + rest.getBody());                        Assert.assertTrue(rest.getBody().equals("1"));                            res= api.delSnapshotVersionStatus(versionid,JobName);                            assert  res.getCode()==200;                         //   Thread.sleep(5000L);                        return;                        }                        else if(status==null) {}                        else {                            Assert.assertTrue(false);                        }                    }                    try {                        Thread.sleep(5000L);                    } catch (InterruptedException var11) {                        var11.printStackTrace();                    }                }                Assert.assertTrue(false);                return;            }        }    }    @Ignore    public void TestCase_CreateSnapshotAndRoolBack_OnceCron_256() throws InterruptedException {        String JobName = "OnceCron" + String.valueOf(System.currentTimeMillis());        SsrequestModel srm = new SsrequestModel();        srm.setName(JobName);        srm.setStoragepoolId(poolid);        srm.setFsuserId(Integer.valueOf(userid));        srm.setFsusergroupId(Integer.valueOf(groupid));        srm.setDicName("./" + username);        timeObject tt = CronUtil.onceCronTime(120*1000);        srm.setDispatchCron(tt.getCron());        srm.setDay(1);        srm.setWeek("1");        srm.setTime(tt.getTime());        srm.setDispatchTime(tt.getDispatchTime());        srm.setSnaDesc("");        srm.setDispatchStyle("1");        srm.setVersionDeletestrategy(256);        System.out.println(String.format("创建快照:%s", JSON.toJSONString(srm)));        Result res = api.CreateSnapshot(JSON.toJSONString(srm));        Assert.assertTrue(res.getCode() == 200);        System.out.println(String.format("创建快照成功：%s", res.getBody()));        res = api.GetSnapshotList(JobName);        JSONArray test = JSON.parseObject(res.getBody()).getJSONArray("content");        for(int i = 0; i < test.size(); ++i) {            if (test.getJSONObject(i).getString("name").contains(JobName)) {                int sid=test.getJSONObject(i).getInteger("id");                for (int  x=0;x<256;x++) {                    timeObject tt1 = CronUtil.onceCronTime(70*1000);                    srm.setId(sid);                    srm.setDispatchCron(tt1.getCron());                    Result rest = sshcmd.exec(String.format("touch  %s/pdstest%s.txt&&ls  %s/pdstest%s.txt|wc -l", export_path, x,export_path,x));                    Assert.assertTrue(rest.getBody().equals("1"));                    res = api.EditSnapshot(JSON.toJSONString(srm).toString());                    Assert.assertTrue(res.getCode() == 200);                    String id = test.getJSONObject(i).getString("id");                    SnapshotId = id;                    for (int w = 0; w < 180; ++w) {                        res = api.GetSnapshotVersion(id);                        Result res1 = api.GetSnapshotVersionStatus(JobName);                        System.out.println(res.getBody());                        JSONObject c = JSONObject.parseObject(res1.getBody());                        JSONObject c1 = JSONObject.parseObject(res.getBody());                        int bb=c1.getJSONArray("list").size();                       // (!res.getBody().equals("[]") && !res.getBody().contains("\"totalCount\":0")) ||                        if (bb==x+1) {                            Boolean status = c.getJSONArray("content").getJSONObject(0).getBoolean("isSuccess");                            if (status != null && status == true) {                                rest = sshcmd.exec(String.format("rm -rf  %s/pdstest%s.txt&&ls  %s/pdstest%s.txt|wc -l", export_path,x, export_path,x));                                System.out.println("删除文件，使用备份的文件进行回滚: " + rest.getBody());                                Assert.assertTrue(rest.getBody().equals("0"));                                String versionid = c1.getJSONArray("list").getJSONObject(0).getString("id");                                res = api.rollbackSnapshot(id, versionid);                                System.out.println(res.getBody());                                Assert.assertTrue(res.getCode() == 200);                                Thread.sleep(3000L);                                rest = sshcmd.exec(String.format("ls  %s/pdstest%s.txt|wc -l", export_path,x));                                System.out.println("查看回滚后，文件是否生成：" + rest.getBody());                                Assert.assertTrue(rest.getBody().equals("1"));                                //res = api.delSnapshotVersionStatus(versionid, JobName);                                //assert res.getCode() == 200;                                break;                            } else if (status == null) {                            } else {                                Assert.assertTrue(false);                            }                        }                        try {                            Thread.sleep(5000L);                        } catch (InterruptedException var11) {                            var11.printStackTrace();                        }                    }                    //Assert.assertTrue(false);                    //return;                }            }        }    }    @Ignore    public void TestCase_CreateSnapshotAndRoolBack_versionnumber_one() throws InterruptedException {        String JobName = "OnceCron" + String.valueOf(System.currentTimeMillis());        SsrequestModel srm = new SsrequestModel();        srm.setName(JobName);        srm.setStoragepoolId(poolid);        srm.setFsuserId(Integer.valueOf(userid));        srm.setFsusergroupId(Integer.valueOf(groupid));        srm.setDicName("./" + username);        timeObject tt = CronUtil.onceCronTime(60);        srm.setDispatchCron(tt.getCron());        srm.setDay(1);        srm.setWeek("1");        srm.setTime(tt.getTime());        srm.setDispatchTime(tt.getDispatchTime());        srm.setSnaDesc("");        srm.setDispatchStyle("1");        srm.setVersionDeletestrategy(1);        System.out.println(String.format("创建快照:", JSON.toJSONString(srm)));        Result res = api.CreateSnapshot(JSON.toJSONString(srm));        Assert.assertTrue(res.getCode() == 200);        System.out.println(String.format("创建快照成功：%s", res.getBody()));        res = api.GetSnapshotList(JobName);        JSONArray test = JSON.parseObject(res.getBody()).getJSONArray("content");        for(int i = 0; i < test.size(); ++i) {            if (test.getJSONObject(i).getString("name").contains(JobName)) {                String id = test.getJSONObject(i).getString("id");                SnapshotId = id;                for(int w = 0; w < 180; ++w) {                    res = api.GetSnapshotVersion(id);                    Result    res1=api.GetSnapshotVersionStatus(JobName);                    System.out.println(res.getBody());                    JSONObject  c=JSONObject.parseObject(res1.getBody());                    JSONObject  c1=JSONObject.parseObject(res.getBody());                    if (!res.getBody().equals("[]") &&!res.getBody().contains("\"totalCount\":0")) {                        Boolean  status=c.getJSONArray("content").getJSONObject(0).getBoolean("isSuccess");                        if(status!=null&& status==true){                            Result rest = sshcmd.exec(String.format("echo \"1\" >>  %s/pdstest.txt&&ls  %s/pdstest.txt|wc -l",export_path,export_path));                            System.out.println("修改文件内容: " + rest.getBody());                            Assert.assertTrue(rest.getBody().equals("0"));                            rest = sshcmd.exec(String.format("md5sum  %s/pdstest.txt",export_path));                            String md5sum1=rest.getBody();                            tt = CronUtil.onceCronTime(60);                            srm.setTime(tt.getTime());                            srm.setDispatchTime(tt.getDispatchTime());                            res = api.EditSnapshot(JSON.toJSONString(srm));                            assert  res.getCode()==204;                          //  TestCase_wait(JSONArray,JobName);                            String versionid = c1.getJSONArray("list").getJSONObject(0).getString("id");                            res = api.rollbackSnapshot(id, versionid);                            System.out.println(res.getBody());                            Assert.assertTrue(res.getCode() == 200);                            Thread.sleep(3000L);                            rest = sshcmd.exec(String.format("ls  %s/pdstest.txt|wc -l",export_path));                            System.out.println("查看回滚后，文件是否生成：" + rest.getBody());                            Assert.assertTrue(rest.getBody().equals("1"));                            res= api.delSnapshotVersionStatus(versionid,JobName);                            assert  res.getCode()==200;                         //   Thread.sleep(5000L);                            return;                        }                        else if(status==null) {}                        else {                            Assert.assertTrue(false);                        }                    }                    try {                        Thread.sleep(5000L);                    } catch (InterruptedException var11) {                        var11.printStackTrace();                    }                }                Assert.assertTrue(false);                return;            }        }    }}