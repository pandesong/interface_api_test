package testapi.DistributedStorage.FilesStorage;import cn.afterturn.easypoi.excel.ExcelImportUtil;import cn.afterturn.easypoi.excel.entity.ImportParams;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.tngtech.java.junit.dataprovider.DataProvider;import com.tngtech.java.junit.dataprovider.DataProviderRunner;import com.tngtech.java.junit.dataprovider.UseDataProvider;import org.junit.*;import org.junit.runner.RunWith;import org.junit.runners.MethodSorters;import org.python.util.PythonInterpreter;import testapi.common.DistributedStorage.*;import testapi.common.Result;import testapi.common.api.PgApi;import testapi.common.apiManager.DapiTest;import testapi.framework.SSHExecutor;import testapi.framework.libuploaddownload;import java.io.File;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import static testapi.DistributedStorage.FilesStorage.UserFileObject.getMD5Three;@RunWith(DataProviderRunner.class)@FixMethodOrder(MethodSorters.NAME_ASCENDING)public class UserGroupManagement {    static DapiTest api=new DapiTest(false);    static PgApi pg=new PgApi(api.database_ip,api.database_port,api.database_username,api.database_password,api.database_dbname);    static String storename;    static int poolid=4;    static SSHExecutor sshcmd=null;    static String password="Zjcc_123";    static  String username="pdstest02";    static String  groupname="pgrouptest";    static  String  test_ftp_export_path=String.format("/ftp_exports/%s_%s/%s",storename,groupname,username);    static  String  test_nfs_export_path=String.format("/exports/%s_%s/%s",groupname,username,storename);    static  String  test_export_path=String.format("/exports/%s/%s/%s",storename,groupname,username);    static String  uid=null;    static String  id=null;    static  String path1=System.getProperty("user.dir");    static ArrayList<String> nodes=null;    class RunnableDemonfs implements Runnable {        private Thread t;        String filename_path;        String filename;        RunnableDemonfs(String filename_path, String filename) {            this.filename_path=filename_path;            this.filename=filename;        }        public void run() {            long  t1=System.currentTimeMillis()/1000;            long a= api.nfsupload(filename_path, filename);            long t2=System.currentTimeMillis()/1000;            System.out.println(String.format("upload  file  cost   all %s : ,upload %s ",String.valueOf(t2-t1),String.valueOf(a)));            Assert.assertTrue("上传过程中停止共享仍然可以继续上传",a<0);        }        public void start () {            if (t == null) {                t = new Thread (this);                t.start ();            }        }    }    class RunnableDemoftp implements Runnable {        private Thread t;        String filename_path;        String filename;        RunnableDemoftp(String filename_path, String filename) {            this.filename_path=filename_path;            this.filename=filename;        }        public void run() {            long  t1=System.currentTimeMillis()/1000;            int a= api.ftpupload(String.format("/%s/%s",storename,this.filename),username,password,this.filename_path);            long t2=System.currentTimeMillis()/1000;            System.out.println(String.format("upload  file  cost   all %s : ,upload %s ",String.valueOf(t2-t1),String.valueOf(a)));            Assert.assertTrue("上传过程中停止共享仍然可以继续上传",a!=0);        }        public void start () {            if (t == null) {                t = new Thread (this);                t.start ();            }        }    }    class RunnableDemosmb implements Runnable {        private Thread t;        String filename_path;        String ip;        RunnableDemosmb(String filename_path,String ip) {            this.filename_path=filename_path;            this.ip=ip;        }        public void run() {            long  t1=System.currentTimeMillis()/1000;            test_export_path = String.format("/exports/%s/%s/%s", storename, groupname, username);            String request = String.format("python   plib\\smbtest.py  %s   %s   %s  %s  %s", username, storename, this.ip, password, filename_path);            System.out.println(request);            Result resp = api.cmd_command(request);            System.out.println("获取smbtest 上传文件的结果："+resp.getBody());            Assert.assertTrue("上传过程中停止共享仍然可以继续上传",resp.getBody().contains("failed"));            long t2=System.currentTimeMillis()/1000;            System.out.println(String.format("upload  file  cost   all %s",String.valueOf(t2-t1)));        }        public void start () {            if (t == null) {                t = new Thread (this);                t.start ();            }        }    }    @BeforeClass    public  static void beforeclass() throws InterruptedException {        CreateStorePool_danfuben();        poolid=Integer.valueOf(pg.execsql(String.format("SELECT  id  from ame_storagepool where name='%s';",storename)));        Thread.sleep(5000);        username= "puser" + String.valueOf(System.currentTimeMillis() / 1000);        groupname = "guser" + String.valueOf(System.currentTimeMillis() / 1000);        id = TestCase_CreateUserGroup(groupname);        Assert.assertTrue(id!=null);        CreateUserRequestModel user = new CreateUserRequestModel();        user.setName(username);        user.setGroupId(Integer.valueOf(id));        user.setPsw(password);        user.setCheckPass(password);        user.setQuotaType("1");        user.setIsEnable(true);        ArrayList<TableData> tds = new ArrayList<TableData>();        TableData td = new TableData();        td.setId(poolid);        td.setLabel(storename);        td.setFreeDiskSpace(1073741824);        td.setQuota("10");        td.setType("2");        td.setQuotaType("1");        tds.add(td);        ArrayList<storageUserPoolVos> pools = new ArrayList<storageUserPoolVos>();        storageUserPoolVos pool = new storageUserPoolVos();        pool.setPoolId(poolid);        pool.setPoolName(storename);        pool.setNewQuota("1073741824");        pool.setQuotaType("1");        pools.add(pool);        user.setStorageUserPoolVos(pools);        user.setTableData(tds);        user.setPassword(api.encrypt(password.getBytes()));        Result resp = api.CreateUser(JSON.toJSONString(user));        System.out.println(resp.getBody());        Assert.assertTrue(resp.getCode() == 200);        uid = pg.execsql(String.format("select  id from ame_fsuser where  group_id='%s'", id));        sshcmd=api.ssh_login(api.ssh_dest_username,api.ssh_dest_password, api.ssh_dst_ip, api.ssh_dest_port);        test_ftp_export_path=String.format("/ftp_exports/%s_%s/%s",storename,groupname,username);        test_nfs_export_path=String.format("/exports/%s_%s/%s",groupname,username,storename);        test_export_path=String.format("/exports/%s/%s/%s",storename,groupname,username);        nodes = pg.execsqlex(String.format("SELECT  ip from  ame_storagenode  where  status=1  and  connect_status=1 and service_status=3;"));    }    @DataProvider    public static Object[][] ftp_file_list() {        String path=System.getProperty("user.dir");        Object a=new Object[][]{};        return new Object[][]{                {path+"\\TestData\\wps.exe", "123"}        };    }    @AfterClass    public static void afterclass(){        String cmd = String.format("rm  -rf   %s/*", test_export_path);        System.out.println(cmd);        Result rest = sshcmd.exec(cmd);        Result res = api.DeleteUser(uid);        assert res.getCode()==200;        res = api.DeleteGroup(id);        assert res.getCode()==200;        res = api.disableStoreAgePool("{\"id\":%id%}".replace("%id%",String.valueOf(poolid)));        assert res.getCode()==200;        res = api.deleteStoreAgePool(String.valueOf(poolid));        assert res.getCode()==200;    }    @DataProvider    public static List<hostlist> hostlistdate() {        try{            ImportParams params = new ImportParams();            params.setTitleRows(1);            params.setHeadRows(1);            List<hostlist> list = ExcelImportUtil.importExcel(new File(api.host_list), hostlist.class, params);            return list;        }catch (Exception e){            //e.printStackTrace();            return null;        }    }    public static String TestCase_CreateUserGroup(String groupname){        Assert.assertTrue(groupname!=null);        String JobName="pgroup"+String.valueOf(System.currentTimeMillis());        CreateGroupRequestModel Gre=new CreateGroupRequestModel();        Gre.setName(groupname);        Gre.setIsEnable(true);        Gre.setPsw(password);        Gre.setCheckPass(password);        Gre.setBillingMethod("1");        Gre.setPassword(api.encrypt(password.getBytes()));        ArrayList<StoragePoolVos>  pools=new ArrayList<StoragePoolVos>();        StoragePoolVos pool=new StoragePoolVos();        pool.setPoolId(poolid);        pool.setPoolName(storename);        pool.setNewQuota(1073741824l);        pools.add(pool);        ArrayList<TableData>  tds=new ArrayList<TableData>();        TableData td=new TableData();        td.setId(poolid);        td.setLabel(storename);        td.setFreeDiskSpace(1073741824);        td.setQuota("10");        td.setType("2");        tds.add(td);        Gre.setStoragePoolVos(pools);        Gre.setTableData(tds);        Result res=api.CreateGroupe(JSON.toJSONString(Gre));        // Assert.assertTrue(res.getCode()==200);        return   pg.execsql(String.format("select  id from ame_fsusergroup where  name='%s'",groupname));    }    public static String CreateStorePool_danfuben() throws InterruptedException {        storename = "pool" + String.valueOf(System.currentTimeMillis() / 1000);        CreateStorePoolRequestModel rm=new CreateStorePoolRequestModel();        ArrayList unit=new ArrayList();        JSONArray um = api.GetStoreagePoolUnusedUint("", "", "");        for(Object ss:um){            StoreagePoolUnusedUintResponsedetailModel    dd= JSONObject.parseObject(ss.toString(),StoreagePoolUnusedUintResponsedetailModel.class);            unit.add(dd.getId());        }        rm.setName(storename);        rm.setHddUnits(unit);        rm.setPoolType(0);        rm.setHddStrategy(1);        rm.setSsdStrategy("");        rm.setSsdProtectNum(1);        rm.setHddProtectNum(1);        System.out.println(JSONObject.toJSON(rm).toString());        Result resp = api.CreateStore(JSONObject.toJSON(rm).toString());        Assert.assertTrue(resp.getCode()==200);        Thread.sleep(3000);        Result res=api.getpooldetail(storename);        Assert.assertTrue(resp.getCode()==200);        Assert.assertTrue(res.getBody()!=null);        StoreageModel sm=  JSONObject.parseObject(res.getBody(),StoreageModel.class);        api.enableStoreAgePool("{\"id\":%id%}".replace("%id%",sm.getContent().get(0).getId()));        while (api.GetStoreAgePool(storename).getBody().indexOf("\"status\":1")<0){            Thread.sleep(4000);        }        poolid=Integer.valueOf(sm.getContent().get(0).getId());        return  sm.getContent().get(0).getId();    }    public static String CreateStorePool_danfuben1() {        storename = "pool" + String.valueOf(System.currentTimeMillis() / 1000);        CreateStorePoolRequestModel rm=new CreateStorePoolRequestModel();        ArrayList unit=new ArrayList();        JSONArray um = api.GetStoreagePoolUnusedUint("", "", "");        for(Object ss:um){            StoreagePoolUnusedUintResponsedetailModel    dd= JSONObject.parseObject(ss.toString(),StoreagePoolUnusedUintResponsedetailModel.class);            unit.add(dd.getId());        }        rm.setName(storename);        rm.setHddUnits(unit);        rm.setPoolType(0);        rm.setHddStrategy(1);        rm.setSsdStrategy("");        rm.setSsdProtectNum(1);        rm.setHddProtectNum(1);        System.out.println(JSONObject.toJSON(rm).toString());        Result resp = api.CreateStore(JSONObject.toJSON(rm).toString());        Assert.assertTrue(resp.getCode()==200);        Result res=api.getpooldetail(storename);        StoreageModel sm=  JSONObject.parseObject(res.getBody(),StoreageModel.class);        api.enableStoreAgePool("{\"id\":%id%}".replace("%id%",sm.getContent().get(0).getId()));        poolid=Integer.valueOf(sm.getContent().get(0).getId());        return  sm.getContent().get(0).getId();    }        public  void testBcases_findAllEnableFsStoragepoolsCapacity() throws InterruptedException {        Result resp = api.findAllEnableFsStoragepoolsCapacity();        System.out.println(resp.getBody());        Assert.assertTrue(resp.getCode() == 200);        Assert.assertTrue(resp.getBody().contains("{\"content\":[{\"id\""));    }    //经常出现用户组页面获取报400的情况，添加此用例用于测试检测    @Test    public  void testBcases_checkuserGroupList() throws InterruptedException {        Result resp = api.getGroupList();        System.out.println(resp.getBody());        Assert.assertTrue(resp.getCode() == 200);        Assert.assertTrue(resp.getBody().contains("{\"content\":[{\"id\""));    }    @Test    public  void testCcases_checkuserList() throws InterruptedException {        Result resp = api.getUserList();        System.out.println(resp.getBody());        Assert.assertTrue(resp.getCode() == 200);        Assert.assertTrue(resp.getBody().contains("{\"content\":[{\"id\""));    }    public  void testDcases_danfuben_test1() {        for (int i = 0; i < 20; i++) {            String username = "puser" + String.valueOf(System.currentTimeMillis() / 1000);            //String groupname = "guser" + String.valueOf(System.currentTimeMillis() / 1000);            String id="6";           // String id = TestCase_CreateUserGroup(groupname);            Assert.assertTrue(id != null);            CreateUserRequestModel user = new CreateUserRequestModel();            user.setName(username);            user.setGroupId(Integer.valueOf(id));            user.setPsw(password);            user.setCheckPass(password);            user.setQuotaType("1");            user.setIsEnable(true);            ArrayList<TableData> tds = new ArrayList<TableData>();            TableData td = new TableData();            td.setId(poolid);            td.setLabel(storename);            td.setFreeDiskSpace(107374182400L);            td.setQuota("10");            td.setType("2");            td.setQuotaType("1");            tds.add(td);            ArrayList<storageUserPoolVos> pools = new ArrayList<storageUserPoolVos>();            storageUserPoolVos pool = new storageUserPoolVos();            pool.setPoolId(poolid);            pool.setPoolName(storename);            pool.setNewQuota("107374182400");            pool.setQuotaType("1");            pools.add(pool);            user.setStorageUserPoolVos(pools);            user.setTableData(tds);            user.setPassword(api.encrypt(password.getBytes()));            Result resp = api.CreateUser(JSON.toJSONString(user));            System.out.println(resp.getBody());            Assert.assertTrue(resp.getCode() == 200);            String uid = pg.execsql(String.format("select  id from ame_fsuser where  name='%s'", username));            Result res = api.EnableFtpShare(uid,"\"3\",\"2\",\"1\"");            Assert.assertTrue(res.getCode() == 200||res.getBody().contains("用户已经共享"));            try {                Thread.sleep(20000);            } catch (InterruptedException e) {                e.printStackTrace();            }            }    }    @Test    @UseDataProvider("ftp_file_list")    public  void testEcases_ftp_上传用户文件_下载(String filename_path,String md5sum) {        Result res = api.EnableFtpShare(uid,"\"3\"");        Assert.assertTrue(res.getCode()==200||res.getBody().contains("用户已经共享"));        try {            Thread.sleep(2000);        } catch (InterruptedException e) {            e.printStackTrace();        }        for(String ip:nodes) {            if(ip==""||ip==" ") continue;            int pos = filename_path.lastIndexOf("\\");            String filename = filename_path.substring(pos + 1, filename_path.length());            test_export_path = String.format("/exports/%s/%s/%s", storename, groupname, username);            //获取本地文件md5值            String src_md5 = getMD5Three(filename_path);            //通过ftp上传文件            int a= api.ftpupload(String.format("/%s/%s",storename,filename),username,password,filename_path);            Assert.assertTrue("开启共享后，ftp共享未及时开启："+ip,a==0);            //通过后台判断文件是否上成功            String cmd = String.format("ls  '%s/%s'|wc  -l", test_export_path, filename);            sshcmd=api.ssh_login(api.ssh_dest_username,api.ssh_dest_password, ip, api.ssh_dest_port);            System.out.println(cmd);            Result rest = sshcmd.exec(cmd);            System.out.println(rest.getBody());            Assert.assertTrue(rest.getBody().equals("1"));            test_ftp_export_path = String.format("/ftp_exports/%s_%s/%s", groupname, username, storename);            test_nfs_export_path = String.format("/exports/%s_%s/%s", groupname, username, storename);            cmd = String.format("ls  '%s/%s'|wc  -l", test_ftp_export_path, filename);            System.out.println(cmd);            rest = sshcmd.exec(cmd);            System.out.println(rest.getBody());            Assert.assertTrue("FTP 共享目录下存在文件",rest.getBody().equals("1"));            cmd = String.format("ls  '%s/%s'|wc  -l", test_nfs_export_path, filename);            System.out.println(cmd);            rest = sshcmd.exec(cmd);            System.out.println(rest.getBody());           // Assert.assertTrue(rest.getBody().equals("1"));            //判断md5值是否一致            String dst_md5_cmd = String.format("md5sum  %s/%s", test_export_path, filename);            rest = sshcmd.exec(dst_md5_cmd);            String dst_md5 = rest.getBody().split(" ")[0];            Assert.assertTrue("上传的文件与源文件md5不一致",src_md5.contains(dst_md5));//源文件和目的文件md5值一样            System.out.println(rest.getBody());            int t=api.ftpdownload(String.format("/%s/%s",storename,filename),username,password,filename);            src_md5 = getMD5Three(filename);            File ff=new File(filename);            ff.delete();            Assert.assertTrue("下载的文件与源文件md5不一致",src_md5.contains(dst_md5));            //删除目的文件            String rm_cmd = String.format("rm  -rf  %s/*", test_export_path);            sshcmd.exec(rm_cmd);            rest = sshcmd.exec(cmd);            System.out.println(rest.getBody());            Assert.assertTrue(rest.getBody().equals("0"));        }    }    @Test    @UseDataProvider("ftp_file_list")    public  void testAcases_ftp_初始状态未开启共享(String filename_path,String md5sum) {        for(String ip:nodes) {            if(ip==""||ip==" ") continue;            int pos = filename_path.lastIndexOf("\\");            String filename = filename_path.substring(pos + 1, filename_path.length());            test_export_path = String.format("/exports/%s/%s/%s", storename, groupname, username);            //获取本地文件md5值            //通过ftp上传文件            int a=api.ftpupload(String.format("/%s/%s",storename, filename),username,password,filename_path);            Assert.assertTrue(a!=0);        }    }    @Test    @UseDataProvider("ftp_file_list")    public  void testEcases_ftp_上传用户文件_停止共享后不能再次登录(String filename_path,String md5sum) {        Result   res = api.StopShare(uid);        Assert.assertTrue(res.getCode()==200||res.getBody().contains("用户已经停止共享"));        try {            Thread.sleep(2000);        } catch (InterruptedException e) {            e.printStackTrace();        }        for(String ip:nodes) {            if(ip==""||ip==" ") continue;            int pos = filename_path.lastIndexOf("\\");            String filename = filename_path.substring(pos + 1, filename_path.length());            test_export_path = String.format("/exports/%s/%s/%s", storename, groupname, username);            //获取本地文件md5值            int a=api.ftpupload(String.format("/%s/%s",storename, filename),username,password,filename_path);            Assert.assertTrue("停止共享后，ftp共享未及时关闭"+ip,a!=0);        }    }    @Test    public  void testEcases_ftp_上传过程中停止共享() {        Result res = api.StopShare(uid);        Assert.assertTrue(String.format("停止ftp 共享失败:%s",res.getBody()),res.getCode()==200||res.getBody().contains("用户已经停止共享"));        String filename_path=path1+"\\plib\\yanzhengma.exe";        int pos = filename_path.lastIndexOf("\\");        String filename = filename_path.substring(pos + 1, filename_path.length());        test_export_path = String.format("/exports/%s/%s/%s", storename,groupname, username);        String  ftp_path = String.format("/ftp_exports/%s_%s/%s",groupname, username,storename);        for(String ip:nodes) {            if(ip==""||ip==" ") continue;            res = api.EnableFtpShare(uid,"\"3\"");            Assert.assertTrue(res.getCode()==200||res.getBody().contains("用户已经共享"));            try {                Thread.sleep(2000);            } catch (InterruptedException e) {                e.printStackTrace();            }            RunnableDemoftp R1=new  RunnableDemoftp(filename_path,filename);            R1.start();            res = api.StopShare(uid);            Assert.assertTrue(res.getCode()==200||res.getBody().contains("用户已经停止共享"));            String src_md5 = getMD5Three(filename_path);            String dst_md5_cmd = String.format("md5sum  %s/%s", test_export_path, filename);            res = sshcmd.exec(dst_md5_cmd);            String dst_md5 = res.getBody().split(" ")[0];            Assert.assertTrue(String.format("上传的文件与源文件md5一致,停止共享后文件仍然在上传,src_md5:%s,dst_md5:%s",src_md5,dst_md5),!dst_md5.contains(src_md5));//源文件和目的文件md5值一样            String rm_cmd = String.format("ls  %s/%s|wc -l", ftp_path, filename);            res=sshcmd.exec(rm_cmd);            Assert.assertTrue("ftp 共享目录没有完全关闭，可以获取文件列表",res.getBody().contains("0"));            rm_cmd = String.format("rm  -rf  %s/%s", test_export_path, filename);            sshcmd.exec(rm_cmd);            test_export_path = String.format("/exports/%s/%s/%s", storename, groupname, username);            //获取本地文件md5值        }        res = api.StopShare(uid);        Assert.assertTrue(res.getCode()==200||res.getBody().contains("用户已经停止共享"));    }    @Test    @UseDataProvider("ftp_file_list")    public  void testFcases_smba_上传用户文件(String filename_path,String md5sum) {        Result res = api.StopShare(uid);        Assert.assertTrue(res.getCode()==200||res.getBody().contains("用户已经停止共享"));        res = api.EnableFtpShare(uid,"\"2\"");        Assert.assertTrue(res.getCode()==200||res.getBody().contains("用户已经共享"));        try {            Thread.sleep(2000);        } catch (InterruptedException e) {            e.printStackTrace();        }        for(String ip:nodes) {            if(ip==""||ip==" ") continue;            int pos = filename_path.lastIndexOf("\\");            String filename = filename_path.substring(pos + 1, filename_path.length());            test_export_path = String.format("/exports/%s/%s/%s", storename, groupname, username);            //获取本地文件md5值            String src_md5 = getMD5Three(filename_path);            //通过ftp上传文件            String request = String.format("python   plib\\smbtest.py  %s   %s   %s  %s  %s", username, storename, ip, password, filename_path);            System.out.println(request);            Result resp = api.cmd_command(request);            System.out.println(resp.getBody());            //判断后台是否存在文件            String cmd = String.format("ls  '%s/%s'|wc  -l", test_export_path, filename);            System.out.println(cmd);            sshcmd=api.ssh_login(api.ssh_dest_username,api.ssh_dest_password, ip, api.ssh_dest_port);            Result rest = sshcmd.exec(cmd);            System.out.println(rest.getBody());            Assert.assertTrue(rest.getBody().equals("1"));            //判断md5值是否一致            String dst_md5_cmd = String.format("md5sum  %s/%s", test_export_path, filename);            rest = sshcmd.exec(dst_md5_cmd);            String dst_md5 = rest.getBody().split(" ")[0];            Assert.assertTrue(src_md5.contains(dst_md5));//源文件和目的文件md5值一样            System.out.println(rest.getBody());            //删除目的文件            String rm_cmd = String.format("rm  -rf  %s/*", test_export_path);            rest = sshcmd.exec(rm_cmd);            rest = sshcmd.exec(cmd);            System.out.println(rest.getBody());            Assert.assertTrue(rest.getBody().equals("0"));        }    }    @Test    @UseDataProvider("ftp_file_list")    public  void testAcases_smba_初始状态未开启共享(String filename_path,String md5sum) throws InterruptedException {        try {            Thread.sleep(2000);        } catch (InterruptedException e) {            e.printStackTrace();        }        for(String ip:nodes) {            if(ip==""||ip==" ") continue;            test_export_path = String.format("/exports/%s/%s/%s", storename, groupname, username);            String request = String.format("python   plib\\smbtest.py  %s   %s   %s  %s  %s", username, storename, ip, password, filename_path);            System.out.println(request);            Result resp = api.cmd_command(request);            System.out.println("获取smbtest 的初始状态："+resp.getBody());            Assert.assertTrue("初始状态  smba 是开启状态:"+ip,resp.getBody().contains("session setup failed")||resp.getBody().contains("connect failed"));        }    }    @Test    @UseDataProvider("ftp_file_list")    public  void testFcases_smba_上传用户文件_停止共享后不能再次挂载(String filename_path,String md5sum) throws InterruptedException {        Result   res = api.StopShare(uid);        Assert.assertTrue(String.format("停止共享失败:%s",res.getBody()),res.getCode()==200||res.getBody().contains("用户已经停止共享"));        try {            Thread.sleep(2000);        } catch (InterruptedException e) {            e.printStackTrace();        }        for(String ip:nodes) {            if(ip==""||ip==" ") continue;            test_export_path = String.format("/exports/%s/%s/%s", storename, groupname, username);            String request = String.format("python   plib\\smbtest.py  %s   %s   %s  %s  %s", username, storename, ip, password, filename_path);            System.out.println(request);            Result resp = api.cmd_command(request);            System.out.println(resp.getBody());            Assert.assertTrue("停止共享后，samba 共享未正常停止:"+ip,resp.getBody().contains("connect failed"));        }    }    @Test    public  void testFcases_smba_上传过程中停止共享() {        Result res = api.StopShare(uid);        Assert.assertTrue(res.getCode()==200||res.getBody().contains("用户已经停止共享"));        String filename_path=path1+"\\plib\\yanzhengma.exe";        int pos = filename_path.lastIndexOf("\\");        String filename = filename_path.substring(pos + 1, filename_path.length());        test_export_path = String.format("/exports/%s/%s/%s", storename, groupname, username);        String smb_path=String.format("/exports/%s_%s/%s", groupname,username,storename);        String src_md5 = getMD5Three(filename_path);        for(String ip:nodes) {            if(ip==""||ip==" ") continue;            res = api.EnableFtpShare(uid,"\"2\"");            Assert.assertTrue(res.getCode()==200||res.getBody().contains("用户已经共享"));            try {                Thread.sleep(2000);            } catch (InterruptedException e) {                e.printStackTrace();            }            RunnableDemosmb R1 = new RunnableDemosmb(filename_path,ip);            R1.start();            res = api.StopShare(uid);            Assert.assertTrue(res.getCode()==200||res.getBody().contains("用户已经停止共享"));            String dst_md5_cmd = String.format("md5sum  %s/%s", test_export_path, filename);            res = sshcmd.exec(dst_md5_cmd);            String dst_md5 = res.getBody().split(" ")[0];            Assert.assertTrue(!dst_md5.contains(src_md5));//源文件和目的文件md5值一样            System.out.println(res.getBody());            String rm_cmd = String.format("ls  %s/%s|wc  -l", smb_path, filename);            res = sshcmd.exec(rm_cmd);            Assert.assertTrue("smb 停止共享后共享目录仍然可以访问",res.getBody().contains("0"));            //删除目的文件            rm_cmd = String.format("rm  -rf  %s/%s", test_export_path, filename);            res = sshcmd.exec(rm_cmd);            System.out.println(res.getBody());        }    }    @Test    @UseDataProvider("ftp_file_list")    public  void testAcases_nfs_初始状态未开启共享(String filename_path,String md5sum) {        for(String ip:nodes) {            if(ip==""||ip==" ") continue;            //通过nfs上传文件            Assert.assertTrue("初始状态下共享已经开启："+ip,api.nfsmount3(ip,test_export_path)!=0);        }    }    @Test    @UseDataProvider("ftp_file_list")    public  void testFcases_nfs_上传用户文件_下载(String filename_path,String md5sum) {        Result res = api.EnableFtpShare(uid,"\"1\"");        Assert.assertTrue(res.getCode()==200||res.getBody().contains("用户已经共享"));        try {            Thread.sleep(2000);        } catch (InterruptedException e) {            e.printStackTrace();        }        for(String ip:nodes) {            if(ip==""||ip==" ") continue;            int pos = filename_path.lastIndexOf("\\");            String filename = filename_path.substring(pos + 1, filename_path.length());            test_export_path = String.format("/exports/%s_%s/%s", groupname, username,storename);            pos = api.url.indexOf("//");            String uri = api.url.substring(pos + 2, api.url.length());            //获取本地文件md5值            String src_md5 = getMD5Three(filename_path);            //通过nfs上传文件            int mount_res=api.nfsmount3(ip,test_export_path);            if(mount_res==0) {                api.nfsupload(filename_path, filename);                //判断后台是否存在文件                String cmd = String.format("ls  '%s/%s'|wc  -l", test_export_path, filename);                System.out.println(cmd);                Result rest = sshcmd.exec(cmd);                System.out.println(rest.getBody());                Assert.assertTrue(rest.getBody().equals("1"));                //判断md5值是否一致                String dst_md5_cmd = String.format("md5sum  %s/%s", test_export_path, filename);                rest = sshcmd.exec(dst_md5_cmd);                String dst_md5 = rest.getBody().split(" ")[0];                Assert.assertTrue(src_md5.contains(dst_md5));//源文件和目的文件md5值一样                System.out.println(rest.getBody());                //删除目的文件                api.nfsdownload(filename, filename);                src_md5 = getMD5Three(filename);                File ff=new File(filename);                ff.delete();                Assert.assertTrue("下载的文件与源文件md5不一致",src_md5.contains(dst_md5));                sshcmd=api.ssh_login(api.ssh_dest_username,api.ssh_dest_password, ip, api.ssh_dest_port);                String rm_cmd = String.format("rm  -rf  %s/*", test_export_path);                rest = sshcmd.exec(rm_cmd);                rest = sshcmd.exec(cmd);                System.out.println(rest.getBody());                Assert.assertTrue(rest.getBody().equals("0"));            }            else {                Assert.assertTrue("mount  error!:"+String.valueOf(mount_res),false);            }        }    }    @Test    public  void testFcases_nfs_上传用户文件_停止共享后不能再次挂载读取和写入文件() {        Result res = api.EnableFtpShare(uid,"\"1\"");        Assert.assertTrue(res.getCode()==200||res.getBody().contains("用户已经共享"));        res = api.StopShare(uid);        Assert.assertTrue(res.getCode()==200||res.getBody().contains("用户已经停止共享"));        String filename_path=path1+"\\plib\\yanzhengma.exe";        int pos = filename_path.lastIndexOf("\\");        String filename = filename_path.substring(pos + 1, filename_path.length());        try {            Thread.sleep(5000);        } catch (InterruptedException e) {            e.printStackTrace();        }        for(String ip:nodes) {            if(ip==""||ip==" ") continue;            test_export_path = String.format("/exports/%s_%s/%s", groupname, username,storename);            int mount_res=api.nfsmount3(ip,test_export_path);            if(mount_res!=0)                 Assert.assertTrue(String.format("停止共享后仍然可以上传文件",mount_res),mount_res!=0);            else {                long a=api.nfsupload(filename_path, filename);                Assert.assertTrue("",a<0);            }        }    }    @Test    public  void testFcases_nfs_上传过程中停止共享() {        Result   res = api.StopShare(uid);        Assert.assertTrue(res.getCode()==200||res.getBody().contains("用户已经停止共享"));        String filename_path=path1+"\\plib\\yanzhengma.exe";        int pos = filename_path.lastIndexOf("\\");        String filename = filename_path.substring(pos + 1, filename_path.length());        test_export_path = String.format("/exports/%s/%s/%s", storename,groupname, username);        String  nfs_path = String.format("/exports/%s_%s/%s",groupname, username,storename);        for(String ip:nodes) {            if(ip==""||ip==" ") continue;            res = api.EnableFtpShare(uid,"\"1\"");            Assert.assertTrue(res.getCode()==200||res.getBody().contains("用户已经共享"));            try {                Thread.sleep(5000);            } catch (InterruptedException e) {                e.printStackTrace();            }            //通过nfs上传文件            int mount_res=api.nfsmount3(ip,nfs_path);            if(mount_res==0) {                RunnableDemonfs R1 = new RunnableDemonfs(filename_path, filename);                R1.start();                System.out.println("start to stop nfs share!");                res = api.StopShare(uid);                Assert.assertTrue(res.getCode()==200||res.getBody().contains("用户已经停止共享"));                String src_md5 = getMD5Three(filename_path);                String dst_md5_cmd = String.format("md5sum  %s/%s", test_export_path, filename);                res = sshcmd.exec(dst_md5_cmd);                String dst_md5 = res.getBody().split(" ")[0];                Assert.assertTrue(String.format("上传的文件与源文件md5一致,停止共享后文件仍然在上传,src_md5:%s,dst_md5:%s",src_md5,dst_md5),!dst_md5.contains(src_md5));//源文件和目的文件md5值一样                String rm_cmd = String.format("ls  %s/%s|wc -l", nfs_path, filename);                res=sshcmd.exec(rm_cmd);                Assert.assertTrue("nfs 共享目录没有完全关闭，可以获取文件列表",res.getBody().contains("0"));                rm_cmd = String.format("rm  -rf  %s/%s", test_export_path, filename);                sshcmd.exec(rm_cmd);            }            else {                Assert.assertTrue(String.format("mount  error!:%s,%s",(mount_res),ip),false);            }        }    }    @Test    @UseDataProvider("ftp_file_list")    public  void testEcases_ftpnfssmba_上传下载(String filename_path,String md5sum) {        Result   res = api.StopShare(uid);        Assert.assertTrue(res.getCode()==200||res.getBody().contains("用户已经停止共享"));        res = api.EnableFtpShare(uid,"\"3\",\"2\",\"1\"");        Assert.assertTrue(res.getCode()==200||res.getBody().contains("用户已经共享"));        try {            Thread.sleep(2000);        } catch (InterruptedException e) {            e.printStackTrace();        }        for(String ip:nodes) {            if(ip==""||ip==" ") continue;            int pos = filename_path.lastIndexOf("\\");            String filename = filename_path.substring(pos + 1, filename_path.length());            test_export_path = String.format("/exports/%s/%s/%s", storename, groupname, username);            //获取本地文件md5值            String src_md5 = getMD5Three(filename_path);            //通过ftp上传文件            int a= api.ftpupload(String.format("/%s/%s",storename,filename),username,password,filename_path);            Assert.assertTrue("开启共享后，ftp共享未及时开启："+ip,a==0);            //通过后台判断文件是否上成功            String cmd = String.format("ls  '%s/%s'|wc  -l", test_export_path, filename);            sshcmd=api.ssh_login(api.ssh_dest_username,api.ssh_dest_password, ip, api.ssh_dest_port);            System.out.println(cmd);            Result rest = sshcmd.exec(cmd);            System.out.println(rest.getBody());            Assert.assertTrue(rest.getBody().equals("1"));            test_ftp_export_path = String.format("/ftp_exports/%s_%s/%s", groupname, username, storename);            test_nfs_export_path = String.format("/exports/%s_%s/%s", groupname, username, storename);            cmd = String.format("ls  '%s/%s'|wc  -l", test_ftp_export_path, filename);            System.out.println(cmd);            rest = sshcmd.exec(cmd);            System.out.println(rest.getBody());            Assert.assertTrue("FTP 共享目录下存在文件",rest.getBody().equals("1"));            cmd = String.format("ls  '%s/%s'|wc  -l", test_nfs_export_path, filename);            System.out.println(cmd);            rest = sshcmd.exec(cmd);            System.out.println(rest.getBody());            // Assert.assertTrue(rest.getBody().equals("1"));            //判断md5值是否一致            String dst_md5_cmd = String.format("md5sum  %s/%s", test_export_path, filename);            rest = sshcmd.exec(dst_md5_cmd);            String dst_md5 = rest.getBody().split(" ")[0];            Assert.assertTrue("上传的文件与源文件md5不一致",src_md5.contains(dst_md5));//源文件和目的文件md5值一样            System.out.println(rest.getBody());            int t=api.ftpdownload(String.format("/%s/%s",storename,filename),username,password,filename);            src_md5 = getMD5Three(filename);            File ff=new File(filename);            ff.delete();            Assert.assertTrue("下载的文件与源文件md5不一致",src_md5.contains(dst_md5));            //删除目的文件            String rm_cmd = String.format("rm  -rf  %s/%s", test_export_path, filename);            sshcmd.exec(rm_cmd);            rest = sshcmd.exec(cmd);            System.out.println(rest.getBody());            Assert.assertTrue(rest.getBody().equals("0"));            //nfs 挂载测试            test_export_path = String.format("/exports/%s_%s/%s", groupname, username,storename);            int mount_res=api.nfsmount3(ip,test_export_path);            if(mount_res==0) {                api.nfsupload(filename_path, filename);                //判断后台是否存在文件                cmd = String.format("ls  '%s/%s'|wc  -l", test_export_path, filename);                System.out.println(cmd);                rest = sshcmd.exec(cmd);                System.out.println(rest.getBody());                Assert.assertTrue(rest.getBody().equals("1"));                //判断md5值是否一致                dst_md5_cmd = String.format("md5sum  %s/%s", test_export_path, filename);                rest = sshcmd.exec(dst_md5_cmd);                dst_md5 = rest.getBody().split(" ")[0];                Assert.assertTrue(src_md5.contains(dst_md5));//源文件和目的文件md5值一样                System.out.println(rest.getBody());                //删除目的文件                api.nfsdownload(filename, filename);                src_md5 = getMD5Three(filename);                ff=new File(filename);                ff.delete();                Assert.assertTrue("下载的文件与源文件md5不一致",src_md5.contains(dst_md5));                sshcmd=api.ssh_login(api.ssh_dest_username,api.ssh_dest_password, ip, api.ssh_dest_port);                rm_cmd = String.format("rm  -rf  %s/%s", test_export_path, filename);                rest = sshcmd.exec(rm_cmd);                rest = sshcmd.exec(cmd);                System.out.println(rest.getBody());                Assert.assertTrue(rest.getBody().equals("0"));            }            else {                Assert.assertTrue("mount  error!:"+String.valueOf(mount_res),false);            }            test_export_path = String.format("/exports/%s/%s/%s", storename, groupname, username);            src_md5 = getMD5Three(filename_path);            //通过ftp上传文件            String request = String.format("python   plib\\smbtest.py  %s   %s   %s  %s  %s", username, storename, ip, password, filename_path);            System.out.println(request);            Result resp = api.cmd_command(request);            System.out.println(resp.getBody());            //判断后台是否存在文件            cmd = String.format("ls  '%s/%s'|wc  -l", test_export_path, filename);            System.out.println(cmd);            sshcmd=api.ssh_login(api.ssh_dest_username,api.ssh_dest_password, ip, api.ssh_dest_port);            rest = sshcmd.exec(cmd);            System.out.println(rest.getBody());            Assert.assertTrue(rest.getBody().equals("1"));            //判断md5值是否一致            dst_md5_cmd = String.format("md5sum  %s/%s", test_export_path, filename);            rest = sshcmd.exec(dst_md5_cmd);            dst_md5 = rest.getBody().split(" ")[0];            Assert.assertTrue(src_md5.contains(dst_md5));//源文件和目的文件md5值一样            System.out.println(rest.getBody());            //删除目的文件            rm_cmd = String.format("rm  -rf  %s/%s", test_export_path, filename);            rest = sshcmd.exec(rm_cmd);            rest = sshcmd.exec(cmd);            System.out.println(rest.getBody());            Assert.assertTrue(rest.getBody().equals("0"));        }    }    @Test    @UseDataProvider("ftp_file_list")    public  void testEcases_ftpnfs_上传下载(String filename_path,String md5sum) {        Result res = api.EnableFtpShare(uid,"\"3\",\"1\"");        Assert.assertTrue(res.getCode()==200||res.getBody().contains("用户已经共享"));        try {            Thread.sleep(2000);        } catch (InterruptedException e) {            e.printStackTrace();        }        for(String ip:nodes) {            if(ip==""||ip==" ") continue;            int pos = filename_path.lastIndexOf("\\");            String filename = filename_path.substring(pos + 1, filename_path.length());            test_export_path = String.format("/exports/%s/%s/%s", storename, groupname, username);            //获取本地文件md5值            String src_md5 = getMD5Three(filename_path);            //通过ftp上传文件            int a= api.ftpupload(String.format("/%s/%s",storename,filename),username,password,filename_path);            Assert.assertTrue("开启共享后，ftp共享未及时开启："+ip,a==0);            //通过后台判断文件是否上成功            String cmd = String.format("ls  '%s/%s'|wc  -l", test_export_path, filename);            sshcmd=api.ssh_login(api.ssh_dest_username,api.ssh_dest_password, ip, api.ssh_dest_port);            System.out.println(cmd);            Result rest = sshcmd.exec(cmd);            System.out.println(rest.getBody());            Assert.assertTrue(rest.getBody().equals("1"));            test_ftp_export_path = String.format("/ftp_exports/%s_%s/%s", groupname, username, storename);            test_nfs_export_path = String.format("/exports/%s_%s/%s", groupname, username, storename);            cmd = String.format("ls  '%s/%s'|wc  -l", test_ftp_export_path, filename);            System.out.println(cmd);            rest = sshcmd.exec(cmd);            System.out.println(rest.getBody());            Assert.assertTrue("FTP 共享目录下存在文件",rest.getBody().equals("1"));            cmd = String.format("ls  '%s/%s'|wc  -l", test_nfs_export_path, filename);            System.out.println(cmd);            rest = sshcmd.exec(cmd);            System.out.println(rest.getBody());            // Assert.assertTrue(rest.getBody().equals("1"));            //判断md5值是否一致            String dst_md5_cmd = String.format("md5sum  %s/%s", test_export_path, filename);            rest = sshcmd.exec(dst_md5_cmd);            String dst_md5 = rest.getBody().split(" ")[0];            Assert.assertTrue("上传的文件与源文件md5不一致",src_md5.contains(dst_md5));//源文件和目的文件md5值一样            System.out.println(rest.getBody());            int t=api.ftpdownload(String.format("/%s/%s",storename,filename),username,password,filename);            src_md5 = getMD5Three(filename);            File ff=new File(filename);            ff.delete();            Assert.assertTrue("下载的文件与源文件md5不一致",src_md5.contains(dst_md5));            //删除目的文件            String rm_cmd = String.format("rm  -rf  %s/*", test_export_path);            sshcmd.exec(rm_cmd);            rest = sshcmd.exec(cmd);            System.out.println(rest.getBody());            Assert.assertTrue(rest.getBody().equals("0"));            //nfs 挂载测试            test_export_path = String.format("/exports/%s_%s/%s", groupname, username,storename);            int mount_res=api.nfsmount3(ip,test_export_path);            if(mount_res==0) {                api.nfsupload(filename_path, filename);                //判断后台是否存在文件                cmd = String.format("ls  '%s/%s'|wc  -l", test_export_path, filename);                System.out.println(cmd);                rest = sshcmd.exec(cmd);                System.out.println(rest.getBody());                Assert.assertTrue(rest.getBody().equals("1"));                //判断md5值是否一致                dst_md5_cmd = String.format("md5sum  %s/%s", test_export_path, filename);                rest = sshcmd.exec(dst_md5_cmd);                dst_md5 = rest.getBody().split(" ")[0];                Assert.assertTrue(src_md5.contains(dst_md5));//源文件和目的文件md5值一样                System.out.println(rest.getBody());                //删除目的文件                api.nfsdownload(filename, filename);                src_md5 = getMD5Three(filename);                ff=new File(filename);                ff.delete();                Assert.assertTrue("下载的文件与源文件md5不一致",src_md5.contains(dst_md5));                sshcmd=api.ssh_login(api.ssh_dest_username,api.ssh_dest_password, ip, api.ssh_dest_port);                rm_cmd = String.format("rm  -rf  %s/*", test_export_path);                rest = sshcmd.exec(rm_cmd);                rest = sshcmd.exec(cmd);                System.out.println(rest.getBody());                Assert.assertTrue(rest.getBody().equals("0"));            }            else {                Assert.assertTrue("mount  error!:"+String.valueOf(mount_res),false);            }        }    }    @Test    @UseDataProvider("ftp_file_list")    public  void testEcases_ftpsamba_上传下载(String filename_path,String md5sum) {        Result   res = api.StopShare(uid);        Assert.assertTrue(res.getCode()==200||res.getBody().contains("用户已经停止共享"));        res = api.EnableFtpShare(uid,"\"3\",\"2\"");        Assert.assertTrue(res.getCode()==200||res.getBody().contains("用户已经共享"));        try {            Thread.sleep(2000);        } catch (InterruptedException e) {            e.printStackTrace();        }        for(String ip:nodes) {            if(ip==""||ip==" ") continue;            int pos = filename_path.lastIndexOf("\\");            String filename = filename_path.substring(pos + 1, filename_path.length());            test_export_path = String.format("/exports/%s/%s/%s", storename, groupname, username);            //获取本地文件md5值            String src_md5 = getMD5Three(filename_path);            //通过ftp上传文件            int a= api.ftpupload(String.format("/%s/%s",storename,filename),username,password,filename_path);            Assert.assertTrue("开启共享后，ftp共享未及时开启："+ip,a==0);            //通过后台判断文件是否上成功            String cmd = String.format("ls  '%s/%s'|wc  -l", test_export_path, filename);            sshcmd=api.ssh_login(api.ssh_dest_username,api.ssh_dest_password, ip, api.ssh_dest_port);            System.out.println(cmd);            Result rest = sshcmd.exec(cmd);            System.out.println(rest.getBody());            Assert.assertTrue(rest.getBody().equals("1"));            test_ftp_export_path = String.format("/ftp_exports/%s_%s/%s", groupname, username, storename);            test_nfs_export_path = String.format("/exports/%s_%s/%s", groupname, username, storename);            cmd = String.format("ls  '%s/%s'|wc  -l", test_ftp_export_path, filename);            System.out.println(cmd);            rest = sshcmd.exec(cmd);            System.out.println(rest.getBody());            Assert.assertTrue("FTP 共享目录下存在文件",rest.getBody().equals("1"));            cmd = String.format("ls  '%s/%s'|wc  -l", test_nfs_export_path, filename);            System.out.println(cmd);            rest = sshcmd.exec(cmd);            System.out.println(rest.getBody());            // Assert.assertTrue(rest.getBody().equals("1"));            //判断md5值是否一致            String dst_md5_cmd = String.format("md5sum  %s/%s", test_export_path, filename);            rest = sshcmd.exec(dst_md5_cmd);            String dst_md5 = rest.getBody().split(" ")[0];            Assert.assertTrue("上传的文件与源文件md5不一致",src_md5.contains(dst_md5));//源文件和目的文件md5值一样            System.out.println(rest.getBody());            int t=api.ftpdownload(String.format("/%s/%s",storename,filename),username,password,filename);            src_md5 = getMD5Three(filename);            File ff=new File(filename);            ff.delete();            Assert.assertTrue("下载的文件与源文件md5不一致",src_md5.contains(dst_md5));            //删除目的文件            String rm_cmd = String.format("rm  -rf  %s/*", test_export_path);            sshcmd.exec(rm_cmd);            rest = sshcmd.exec(cmd);            System.out.println(rest.getBody());            Assert.assertTrue(rest.getBody().equals("0"));            src_md5 = getMD5Three(filename_path);            //通过ftp上传文件            String request = String.format("python   plib\\smbtest.py  %s   %s   %s  %s  %s", username, storename, ip, password, filename_path);            System.out.println(request);            Result resp = api.cmd_command(request);            System.out.println(resp.getBody());            //判断后台是否存在文件            cmd = String.format("ls  '%s/%s'|wc  -l", test_export_path, filename);            System.out.println(cmd);            sshcmd=api.ssh_login(api.ssh_dest_username,api.ssh_dest_password, ip, api.ssh_dest_port);            rest = sshcmd.exec(cmd);            System.out.println(rest.getBody());            Assert.assertTrue(rest.getBody().equals("1"));            //判断md5值是否一致            dst_md5_cmd = String.format("md5sum  %s/%s", test_export_path, filename);            rest = sshcmd.exec(dst_md5_cmd);            dst_md5 = rest.getBody().split(" ")[0];            Assert.assertTrue(src_md5.contains(dst_md5));//源文件和目的文件md5值一样            System.out.println(rest.getBody());            //删除目的文件            rm_cmd = String.format("rm  -rf  %s/*", test_export_path);            rest = sshcmd.exec(rm_cmd);            rest = sshcmd.exec(cmd);            System.out.println(rest.getBody());            Assert.assertTrue(rest.getBody().equals("0"));        }    }    @Test    @UseDataProvider("ftp_file_list")    public  void testEcases_nfssamba_上传下载(String filename_path,String md5sum) {        Result   res = api.StopShare(uid);        Assert.assertTrue(res.getCode()==200||res.getBody().contains("用户已经停止共享"));        res = api.EnableFtpShare(uid,"\"1\",\"2\"");        Assert.assertTrue(res.getCode()==200||res.getBody().contains("用户已经共享"));        try {            Thread.sleep(2000);        } catch (InterruptedException e) {            e.printStackTrace();        }        for(String ip:nodes) {            if(ip==""||ip==" ") continue;            int pos = filename_path.lastIndexOf("\\");            String filename = filename_path.substring(pos + 1, filename_path.length());            test_export_path = String.format("/exports/%s/%s/%s", storename, groupname, username);            //获取本地文件md5值            String src_md5 = getMD5Three(filename_path);            //通过SAMBA上传文件            String request = String.format("python   plib\\smbtest.py  %s   %s   %s  %s  %s", username, storename, ip, password, filename_path);            System.out.println(request);            Result resp = api.cmd_command(request);            System.out.println(resp.getBody());            //判断后台是否存在文件            String cmd = String.format("ls  '%s/%s'|wc  -l", test_export_path, filename);            System.out.println(cmd);            sshcmd=api.ssh_login(api.ssh_dest_username,api.ssh_dest_password, ip, api.ssh_dest_port);            Result rest = sshcmd.exec(cmd);            System.out.println(rest.getBody());            Assert.assertTrue(rest.getBody().equals("1"));            //判断md5值是否一致            String dst_md5_cmd = String.format("md5sum  %s/%s", test_export_path, filename);            rest = sshcmd.exec(dst_md5_cmd);            String dst_md5 = rest.getBody().split(" ")[0];            Assert.assertTrue(src_md5.contains(dst_md5));//源文件和目的文件md5值一样            System.out.println(rest.getBody());            //删除目的文件            String rm_cmd = String.format("rm  -rf  %s/*", test_export_path);            rest = sshcmd.exec(rm_cmd);            rest = sshcmd.exec(cmd);            System.out.println(rest.getBody());            Assert.assertTrue(rest.getBody().equals("0"));            //nfs 挂载测试            test_export_path = String.format("/exports/%s_%s/%s", groupname, username,storename);            int mount_res=api.nfsmount3(ip,test_export_path);            if(mount_res==0) {                api.nfsupload(filename_path, filename);                //判断后台是否存在文件                cmd = String.format("ls  '%s/%s'|wc  -l", test_export_path, filename);                System.out.println(cmd);                rest = sshcmd.exec(cmd);                System.out.println(rest.getBody());                Assert.assertTrue(rest.getBody().equals("1"));                //判断md5值是否一致                dst_md5_cmd = String.format("md5sum  %s/%s", test_export_path, filename);                rest = sshcmd.exec(dst_md5_cmd);                dst_md5 = rest.getBody().split(" ")[0];                Assert.assertTrue(src_md5.contains(dst_md5));//源文件和目的文件md5值一样                System.out.println(rest.getBody());                //删除目的文件                api.nfsdownload(filename, filename);                src_md5 = getMD5Three(filename);                File ff=new File(filename);                ff.delete();                Assert.assertTrue("下载的文件与源文件md5不一致",src_md5.contains(dst_md5));                sshcmd=api.ssh_login(api.ssh_dest_username,api.ssh_dest_password, ip, api.ssh_dest_port);                rm_cmd = String.format("rm  -rf  %s/*", test_export_path);                rest = sshcmd.exec(rm_cmd);                rest = sshcmd.exec(cmd);                System.out.println(rest.getBody());                Assert.assertTrue(rest.getBody().equals("0"));            }            else {                Assert.assertTrue(String.format("mount  error!:%s,挂载ip:%s",String.valueOf(mount_res),ip),false);            }        }    }}