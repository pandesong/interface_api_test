package testapi.DistributedStorage.FilesStorage;import cn.afterturn.easypoi.excel.ExcelImportUtil;import cn.afterturn.easypoi.excel.entity.ImportParams;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.tngtech.java.junit.dataprovider.DataProvider;import com.tngtech.java.junit.dataprovider.DataProviderRunner;import org.junit.AfterClass;import org.junit.Assert;import org.junit.BeforeClass;import org.junit.Test;import org.junit.runner.RunWith;import testapi.common.DistributedStorage.*;import testapi.common.Result;import testapi.common.api.PgApi;import testapi.common.apiManager.DapiTest;import testapi.framework.SSHExecutor;import java.io.File;import java.util.ArrayList;import java.util.List;@RunWith(DataProviderRunner.class)public class StorePoolManagement {    static DapiTest api = new DapiTest(false);    PgApi pg = new PgApi(api.database_ip,api.database_port,api.database_username,api.database_password,api.database_dbname);    static SSHExecutor sshcmd=null;    @BeforeClass    public static void beforeclass() {        sshcmd=api.ssh_login(api.ssh_dest_username,api.ssh_dest_password, api.ssh_dst_ip, api.ssh_dest_port);    }    @AfterClass    public static void afterclass() {    }    @DataProvider    public static List<user_name_data_Model> usernamedata() {        try {            ImportParams params = new ImportParams();            params.setTitleRows(1);            params.setHeadRows(1);            List<user_name_data_Model> list = ExcelImportUtil.importExcel(new File(api.user_name_data), user_name_data_Model.class, params);            return list;        } catch (Exception e) {            return null;        }    }    @DataProvider    public static List<hostlist> hostlistdate() {        try {            ImportParams params = new ImportParams();            params.setTitleRows(1);            params.setHeadRows(1);            List<hostlist> list = ExcelImportUtil.importExcel(new File(api.host_list), hostlist.class, params);            return list;        } catch (Exception e) {            return null;        }    }    @Test    public void TestCase_CreateStorePool_danfuben() throws InterruptedException {        for(int i=0;i<3;i++) {            String storename = "pool" + String.valueOf(System.currentTimeMillis() / 1000);            CreateStorePoolRequestModel rm = new CreateStorePoolRequestModel();            ArrayList unit = new ArrayList();            JSONArray um = api.GetStoreagePoolUnusedUint("", "", "");            for (Object ss : um) {                StoreagePoolUnusedUintResponsedetailModel dd = JSONObject.parseObject(ss.toString(), StoreagePoolUnusedUintResponsedetailModel.class);                unit.add(dd.getId());            }            rm.setName(storename);            rm.setHddUnits(unit);            rm.setPoolType(0);            rm.setHddStrategy(1);            rm.setSsdStrategy("");            rm.setSsdProtectNum(1);            rm.setHddProtectNum(1);            System.out.println(JSONObject.toJSON(rm).toString());            Result resp = api.CreateStore(JSONObject.toJSON(rm).toString());            Assert.assertTrue(resp.getCode() == 200);            Result res = api.getpooldetail(storename);            StoreageModel sm = JSONObject.parseObject(res.getBody(), StoreageModel.class);            String poolid = sm.getContent().get(0).getId();            api.enableStoreAgePool("{\"id\":%id%}".replace("%id%", poolid));            Thread.sleep(5000);            resp = sshcmd.exec("df  -h  /exports/" +storename+"  |grep  exports|awk  '{ print $6}'");            System.out.println(String.format("创建存储池启用成功：%s",resp.getBody()));            Assert.assertTrue(resp.getBody().equals("/exports/" +storename));            resp=api.disableStoreAgePool("{\"id\":%id%}".replace("%id%", poolid));            System.out.println(JSONObject.toJSON(resp));            Assert.assertTrue(resp.getCode() == 200);            resp=api.deleteStoreAgePool(String.valueOf(poolid));            Assert.assertTrue(resp.getCode() == 200);            resp = sshcmd.exec("df  -h  /exports/" +storename+"  |grep  exports|wc   -l");            System.out.println(String.format("删除存储池后挂载去除：%s",resp.getBody()));            Assert.assertTrue(Integer.valueOf(resp.getBody())==0);        }    }}