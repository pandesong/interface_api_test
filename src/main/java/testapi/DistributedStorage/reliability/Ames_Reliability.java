package testapi.DistributedStorage.reliability;import cn.afterturn.easypoi.excel.ExcelImportUtil;import cn.afterturn.easypoi.excel.entity.ImportParams;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.tngtech.java.junit.dataprovider.DataProvider;import org.junit.*;import testapi.common.DistributedStorage.*;import testapi.common.Result;import testapi.common.SnapShotModel.SsrequestModel;import testapi.common.Tool.CronUtil;import testapi.common.Tool.timeObject;import testapi.common.api.PgApi;import testapi.common.apiManager.DapiTest;import testapi.framework.SSHExecutor;import java.io.File;import java.util.ArrayList;import java.util.List;public class Ames_Reliability {    static DapiTest api=new DapiTest(false);    static SSHExecutor sshcmd=null;    static  String  groupname="pdstest01";    static  String  username="pusertest";    static String  poolname="cacheno1";    static String  password="Zjcc@123";    String  export_path=String.format("/exports/%s/%s/%s/",poolname,groupname,username);    static String SnapshotId=null;     static int groupid=0;     static int userid=0;    static  int  poolid=0;    static String  clusters=api.cluster01_ip;    static    PgApi pg=new PgApi(api.database_ip,api.database_port,api.database_username,api.database_password,api.database_dbname);    public static int TestCase_CreateUserGroup(String groupname){        Assert.assertTrue(groupname!=null);        String JobName="pgroup"+String.valueOf(System.currentTimeMillis());        CreateGroupRequestModel Gre=new CreateGroupRequestModel();        Gre.setName(groupname);        Gre.setIsEnable(true);        Gre.setPsw(password);        Gre.setCheckPass(password);        Gre.setBillingMethod("1");        Gre.setPassword(api.encrypt(password.getBytes()));        ArrayList<StoragePoolVos>  pools=new ArrayList<StoragePoolVos>();        StoragePoolVos pool=new StoragePoolVos();        pool.setPoolId(poolid);        pool.setPoolName(poolname);        pool.setNewQuota(1073741824);        pools.add(pool);        ArrayList<TableData>  tds=new ArrayList<TableData>();        TableData td=new TableData();        td.setId(poolid);        td.setLabel(poolname);        td.setFreeDiskSpace(1073741824);        td.setQuota("10");        td.setType("2");        tds.add(td);        Gre.setStoragePoolVos(pools);        Gre.setTableData(tds);        Result res=api.CreateGroupe(JSON.toJSONString(Gre));        return  Integer.valueOf(pg.execsql(String.format("select  id from ame_fsusergroup where  name='%s'",groupname)));    }    @BeforeClass    public  static void beforeclass(){    }    @AfterClass    public static void afterclass(){        Result res = api.DeleteUser(String.valueOf(userid));        assert res.getCode()==200;        res = api.DeleteGroup(String.valueOf(groupid));        assert res.getCode()==200;        api.disableStoreAgePool("{\"id\":%id%}".replace("%id%",String.valueOf(poolid)));        api.deleteStoreAgePool(String.valueOf(poolid));    }    @Before    public  void beforetestcase(){        try {            Thread.sleep(2000);        } catch (InterruptedException e) {            e.printStackTrace();        }        String cmd=String.format("echo  'testsssssss'   >> %s/pdstest.txt&&ls  %s/pdstest.txt|wc -l  2>&1", export_path,export_path);        Result rest=sshcmd.exec(cmd);        System.out.println("创建文件，准备进行快照备份："+rest.getBody());        Assert.assertTrue(rest.getBody().equals("1"));    }    @After    public  void aftertestcase() throws InterruptedException {        if(SnapshotId!=null) {            Result res;            Thread.sleep(1000*10);            Result   rest=sshcmd.exec(String.format("rm -rf  %s/pdstest.txt&&ls  %s/pdstest.txt|wc -l",export_path,export_path));            System.out.println("回滚完后删除文件："+rest.getBody());            res = api.DeleteSnapshot(SnapshotId);            Assert.assertTrue(res.getCode() == 200);            res = sshcmd.exec(String.format("/usr/local/amefs/sbin/ame lvg info    %s  |grep  Status|awk  ' {  print $2 } '",poolname));            //Thread.sleep(3000);            Assert.assertTrue(res.getBody().equals("Started"));        }        SnapshotId=null;    }    @DataProvider    public static List<hostlist> hostlistdate() {        try{            ImportParams params = new ImportParams();            params.setTitleRows(1);            params.setHeadRows(1);            List<hostlist> list = ExcelImportUtil.importExcel(new File(api.host_list), hostlist.class, params);            return list;        }catch (Exception e){            return null;        }    }    public  void testcases_reboot_network(){        String[]  cs=clusters.split(",");        for(String ip:cs) {            if(ip==""||ip==" ") continue;            sshcmd=api.ssh_login(api.ssh_dest_username,api.ssh_dest_password, ip, api.ssh_dest_port);           Result res= sshcmd.exec("cat   /usr/local/ames/config/LSI_CFG.json");           JSONObject  ob=JSONObject.parseObject(res.getBody());           String   external_card=ob.getJSONArray("CONFIG").getJSONObject(0).getJSONObject("NETCARD").getString("P_IP_INTF");           String   internal_card=ob.getJSONArray("CONFIG").getJSONObject(0).getJSONObject("NETCARD").getString("I_IP_INTF");           res= sshcmd.exec(String.format("ipdown %s&&sleep 10s&&ipup %s",external_card,external_card));           res= sshcmd.exec(String.format("ipdown %s&&sleep 10s&&ipup %s",internal_card,internal_card));           String    db_external_ip = pg.execsql(String.format("SELECT  ip2  from  ame_storagenode where   ip='%s'", ip));           String    db_internal_ip = pg.execsql(String.format("SELECT  ip3  from  ame_storagenode where   ip='%s'", ip));            String internal_ip= sshcmd.exec(String.format("ip addr show   %s|grep   'inet '|awk  ' { print $2}'|awk  -F  '/' ' { print $1 } '",internal_card)).getBody();            String external_ip= sshcmd.exec(String.format("ip addr show   %s|grep   'inet '|awk  ' { print $2}'|awk  -F  '/' ' { print $1 } '",external_card)).getBody();            Assert.assertTrue(internal_ip.contains(db_internal_ip));            Assert.assertTrue(external_ip.contains(db_external_ip));    }    }}